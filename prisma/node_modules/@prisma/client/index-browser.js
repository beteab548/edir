
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.FamilyScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  created_at: 'created_at'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  custom_id: 'custom_id',
  first_name: 'first_name',
  second_name: 'second_name',
  last_name: 'last_name',
  profession: 'profession',
  title: 'title',
  job_business: 'job_business',
  identification_type: 'identification_type',
  identification_number: 'identification_number',
  identification_image: 'identification_image',
  identification_file_id: 'identification_file_id',
  birth_date: 'birth_date',
  citizen: 'citizen',
  registered_date: 'registered_date',
  end_date: 'end_date',
  wereda: 'wereda',
  zone_or_district: 'zone_or_district',
  kebele: 'kebele',
  green_area: 'green_area',
  block: 'block',
  house_number: 'house_number',
  founding_member: 'founding_member',
  sex: 'sex',
  marital_status: 'marital_status',
  phone_number: 'phone_number',
  phone_number_2: 'phone_number_2',
  member_type: 'member_type',
  bank_name: 'bank_name',
  bank_account_number: 'bank_account_number',
  bank_account_name: 'bank_account_name',
  email: 'email',
  email_2: 'email_2',
  image_url: 'image_url',
  image_file_id: 'image_file_id',
  document: 'document',
  document_file_id: 'document_file_id',
  remark: 'remark',
  created_at: 'created_at',
  status_updated_at: 'status_updated_at',
  status: 'status',
  isPrincipal: 'isPrincipal',
  spouseId: 'spouseId',
  familyId: 'familyId'
};

exports.Prisma.RelativeScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  second_name: 'second_name',
  last_name: 'last_name',
  relation_type: 'relation_type',
  status: 'status',
  created_at: 'created_at',
  status_updated_at: 'status_updated_at',
  familyId: 'familyId'
};

exports.Prisma.ContributionScalarFieldEnum = {
  id: 'id',
  member_id: 'member_id',
  contribution_type_id: 'contribution_type_id',
  type_name: 'type_name',
  amount: 'amount',
  start_date: 'start_date',
  end_date: 'end_date'
};

exports.Prisma.ContributionTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  amount: 'amount',
  penalty_amount: 'penalty_amount',
  is_active: 'is_active',
  is_for_all: 'is_for_all',
  created_at: 'created_at',
  start_date: 'start_date',
  end_date: 'end_date',
  months_before_inactivation: 'months_before_inactivation',
  mode: 'mode',
  period_months: 'period_months'
};

exports.Prisma.PaymentRecordScalarFieldEnum = {
  id: 'id',
  custom_id: 'custom_id',
  member_id: 'member_id',
  contribution_Type_id: 'contribution_Type_id',
  Penalty_id: 'Penalty_id',
  payment_date: 'payment_date',
  payment_method: 'payment_method',
  document_reference: 'document_reference',
  total_paid_amount: 'total_paid_amount',
  remaining_balance: 'remaining_balance',
  penalty_type_payed_for: 'penalty_type_payed_for',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  payment_record_id: 'payment_record_id',
  member_id: 'member_id',
  contribution_id: 'contribution_id',
  contribution_schedule_id: 'contribution_schedule_id',
  penalty_id: 'penalty_id',
  payment_type: 'payment_type',
  payment_month: 'payment_month',
  paid_amount: 'paid_amount'
};

exports.Prisma.BalanceScalarFieldEnum = {
  id: 'id',
  member_id: 'member_id',
  contribution_id: 'contribution_id',
  amount: 'amount',
  unallocated_amount: 'unallocated_amount',
  updated_at: 'updated_at'
};

exports.Prisma.PenaltyScalarFieldEnum = {
  id: 'id',
  member_id: 'member_id',
  contribution_id: 'contribution_id',
  contribution_schedule_id: 'contribution_schedule_id',
  waived: 'waived',
  waived_reason: 'waived_reason',
  waived_reason_document: 'waived_reason_document',
  waived_reason_document_file_id: 'waived_reason_document_file_id',
  generated: 'generated',
  penalty_type: 'penalty_type',
  reason: 'reason',
  expected_amount: 'expected_amount',
  paid_amount: 'paid_amount',
  missed_month: 'missed_month',
  is_paid: 'is_paid',
  applied_at: 'applied_at',
  resolved_at: 'resolved_at',
  penaltyTypeId: 'penaltyTypeId'
};

exports.Prisma.PenaltyTypeModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  amount: 'amount'
};

exports.Prisma.ContributionScheduleScalarFieldEnum = {
  id: 'id',
  contribution_id: 'contribution_id',
  member_id: 'member_id',
  month: 'month',
  expected_amount: 'expected_amount',
  paid_amount: 'paid_amount',
  is_paid: 'is_paid',
  paid_at: 'paid_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.IDType = exports.$Enums.IDType = {
  FAYDA: 'FAYDA',
  KEBELE_ID: 'KEBELE_ID',
  PASSPORT: 'PASSPORT'
};

exports.Sex = exports.$Enums.Sex = {
  Male: 'Male',
  Female: 'Female'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  single: 'single',
  married: 'married',
  divorced: 'divorced',
  widowed: 'widowed'
};

exports.MemberType = exports.$Enums.MemberType = {
  New: 'New',
  Existing: 'Existing'
};

exports.Status = exports.$Enums.Status = {
  Active: 'Active',
  Inactive: 'Inactive',
  Left: 'Left',
  Deceased: 'Deceased'
};

exports.RelativeStatus = exports.$Enums.RelativeStatus = {
  Alive: 'Alive',
  Sick: 'Sick',
  Deceased: 'Deceased'
};

exports.ContributionMode = exports.$Enums.ContributionMode = {
  Recurring: 'Recurring',
  OneTimeWindow: 'OneTimeWindow',
  OpenEndedRecurring: 'OpenEndedRecurring'
};

exports.PenaltyType = exports.$Enums.PenaltyType = {
  automatically: 'automatically',
  manually: 'manually'
};

exports.Prisma.ModelName = {
  Family: 'Family',
  Member: 'Member',
  Relative: 'Relative',
  Contribution: 'Contribution',
  ContributionType: 'ContributionType',
  PaymentRecord: 'PaymentRecord',
  Payment: 'Payment',
  Balance: 'Balance',
  Penalty: 'Penalty',
  PenaltyTypeModel: 'PenaltyTypeModel',
  ContributionSchedule: 'ContributionSchedule'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
