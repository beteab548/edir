
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Relative
 * 
 */
export type Relative = $Result.DefaultSelection<Prisma.$RelativePayload>
/**
 * Model Contribution
 * 
 */
export type Contribution = $Result.DefaultSelection<Prisma.$ContributionPayload>
/**
 * Model ContributionType
 * 
 */
export type ContributionType = $Result.DefaultSelection<Prisma.$ContributionTypePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Balance
 * 
 */
export type Balance = $Result.DefaultSelection<Prisma.$BalancePayload>
/**
 * Model Penalty
 * 
 */
export type Penalty = $Result.DefaultSelection<Prisma.$PenaltyPayload>
/**
 * Model MissedMonth
 * 
 */
export type MissedMonth = $Result.DefaultSelection<Prisma.$MissedMonthPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Sex: {
  Male: 'Male',
  Female: 'Female'
};

export type Sex = (typeof Sex)[keyof typeof Sex]


export const Status: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type Status = (typeof Status)[keyof typeof Status]


export const RelativeStatus: {
  Alive: 'Alive',
  Sick: 'Sick',
  Deceased: 'Deceased'
};

export type RelativeStatus = (typeof RelativeStatus)[keyof typeof RelativeStatus]


export const RelationType: {
  Mother: 'Mother',
  Father: 'Father',
  Daughter: 'Daughter',
  Son: 'Son',
  Sister: 'Sister',
  Brother: 'Brother',
  Spouse_Mother: 'Spouse_Mother',
  Spouse_Father: 'Spouse_Father',
  Spouse_Sister: 'Spouse_Sister',
  Spouse_Brother: 'Spouse_Brother',
  other: 'other'
};

export type RelationType = (typeof RelationType)[keyof typeof RelationType]


export const MemberType: {
  New: 'New',
  Existing: 'Existing'
};

export type MemberType = (typeof MemberType)[keyof typeof MemberType]

}

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type RelativeStatus = $Enums.RelativeStatus

export const RelativeStatus: typeof $Enums.RelativeStatus

export type RelationType = $Enums.RelationType

export const RelationType: typeof $Enums.RelationType

export type MemberType = $Enums.MemberType

export const MemberType: typeof $Enums.MemberType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Members
 * const members = await prisma.member.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Members
   * const members = await prisma.member.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.relative`: Exposes CRUD operations for the **Relative** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relatives
    * const relatives = await prisma.relative.findMany()
    * ```
    */
  get relative(): Prisma.RelativeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contribution`: Exposes CRUD operations for the **Contribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contributions
    * const contributions = await prisma.contribution.findMany()
    * ```
    */
  get contribution(): Prisma.ContributionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contributionType`: Exposes CRUD operations for the **ContributionType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributionTypes
    * const contributionTypes = await prisma.contributionType.findMany()
    * ```
    */
  get contributionType(): Prisma.ContributionTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.balance`: Exposes CRUD operations for the **Balance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balances
    * const balances = await prisma.balance.findMany()
    * ```
    */
  get balance(): Prisma.BalanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.penalty`: Exposes CRUD operations for the **Penalty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Penalties
    * const penalties = await prisma.penalty.findMany()
    * ```
    */
  get penalty(): Prisma.PenaltyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.missedMonth`: Exposes CRUD operations for the **MissedMonth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MissedMonths
    * const missedMonths = await prisma.missedMonth.findMany()
    * ```
    */
  get missedMonth(): Prisma.MissedMonthDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Member: 'Member',
    Relative: 'Relative',
    Contribution: 'Contribution',
    ContributionType: 'ContributionType',
    Payment: 'Payment',
    Balance: 'Balance',
    Penalty: 'Penalty',
    MissedMonth: 'MissedMonth'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "member" | "relative" | "contribution" | "contributionType" | "payment" | "balance" | "penalty" | "missedMonth"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Relative: {
        payload: Prisma.$RelativePayload<ExtArgs>
        fields: Prisma.RelativeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelativeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelativeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          findFirst: {
            args: Prisma.RelativeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelativeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          findMany: {
            args: Prisma.RelativeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>[]
          }
          create: {
            args: Prisma.RelativeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          createMany: {
            args: Prisma.RelativeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelativeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>[]
          }
          delete: {
            args: Prisma.RelativeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          update: {
            args: Prisma.RelativeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          deleteMany: {
            args: Prisma.RelativeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelativeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RelativeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>[]
          }
          upsert: {
            args: Prisma.RelativeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelativePayload>
          }
          aggregate: {
            args: Prisma.RelativeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelative>
          }
          groupBy: {
            args: Prisma.RelativeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelativeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelativeCountArgs<ExtArgs>
            result: $Utils.Optional<RelativeCountAggregateOutputType> | number
          }
        }
      }
      Contribution: {
        payload: Prisma.$ContributionPayload<ExtArgs>
        fields: Prisma.ContributionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContributionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContributionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          findFirst: {
            args: Prisma.ContributionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContributionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          findMany: {
            args: Prisma.ContributionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>[]
          }
          create: {
            args: Prisma.ContributionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          createMany: {
            args: Prisma.ContributionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContributionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>[]
          }
          delete: {
            args: Prisma.ContributionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          update: {
            args: Prisma.ContributionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          deleteMany: {
            args: Prisma.ContributionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContributionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContributionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>[]
          }
          upsert: {
            args: Prisma.ContributionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionPayload>
          }
          aggregate: {
            args: Prisma.ContributionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContribution>
          }
          groupBy: {
            args: Prisma.ContributionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContributionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContributionCountArgs<ExtArgs>
            result: $Utils.Optional<ContributionCountAggregateOutputType> | number
          }
        }
      }
      ContributionType: {
        payload: Prisma.$ContributionTypePayload<ExtArgs>
        fields: Prisma.ContributionTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContributionTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContributionTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          findFirst: {
            args: Prisma.ContributionTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContributionTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          findMany: {
            args: Prisma.ContributionTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>[]
          }
          create: {
            args: Prisma.ContributionTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          createMany: {
            args: Prisma.ContributionTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContributionTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>[]
          }
          delete: {
            args: Prisma.ContributionTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          update: {
            args: Prisma.ContributionTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          deleteMany: {
            args: Prisma.ContributionTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContributionTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContributionTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>[]
          }
          upsert: {
            args: Prisma.ContributionTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContributionTypePayload>
          }
          aggregate: {
            args: Prisma.ContributionTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContributionType>
          }
          groupBy: {
            args: Prisma.ContributionTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContributionTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContributionTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ContributionTypeCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Balance: {
        payload: Prisma.$BalancePayload<ExtArgs>
        fields: Prisma.BalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BalanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BalanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findFirst: {
            args: Prisma.BalanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BalanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findMany: {
            args: Prisma.BalanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          create: {
            args: Prisma.BalanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          createMany: {
            args: Prisma.BalanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BalanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          delete: {
            args: Prisma.BalanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          update: {
            args: Prisma.BalanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          deleteMany: {
            args: Prisma.BalanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BalanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BalanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          upsert: {
            args: Prisma.BalanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          aggregate: {
            args: Prisma.BalanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalance>
          }
          groupBy: {
            args: Prisma.BalanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<BalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.BalanceCountArgs<ExtArgs>
            result: $Utils.Optional<BalanceCountAggregateOutputType> | number
          }
        }
      }
      Penalty: {
        payload: Prisma.$PenaltyPayload<ExtArgs>
        fields: Prisma.PenaltyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PenaltyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PenaltyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          findFirst: {
            args: Prisma.PenaltyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PenaltyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          findMany: {
            args: Prisma.PenaltyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>[]
          }
          create: {
            args: Prisma.PenaltyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          createMany: {
            args: Prisma.PenaltyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PenaltyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>[]
          }
          delete: {
            args: Prisma.PenaltyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          update: {
            args: Prisma.PenaltyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          deleteMany: {
            args: Prisma.PenaltyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PenaltyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PenaltyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>[]
          }
          upsert: {
            args: Prisma.PenaltyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyPayload>
          }
          aggregate: {
            args: Prisma.PenaltyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePenalty>
          }
          groupBy: {
            args: Prisma.PenaltyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PenaltyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PenaltyCountArgs<ExtArgs>
            result: $Utils.Optional<PenaltyCountAggregateOutputType> | number
          }
        }
      }
      MissedMonth: {
        payload: Prisma.$MissedMonthPayload<ExtArgs>
        fields: Prisma.MissedMonthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissedMonthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissedMonthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          findFirst: {
            args: Prisma.MissedMonthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissedMonthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          findMany: {
            args: Prisma.MissedMonthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>[]
          }
          create: {
            args: Prisma.MissedMonthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          createMany: {
            args: Prisma.MissedMonthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MissedMonthCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>[]
          }
          delete: {
            args: Prisma.MissedMonthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          update: {
            args: Prisma.MissedMonthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          deleteMany: {
            args: Prisma.MissedMonthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MissedMonthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MissedMonthUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>[]
          }
          upsert: {
            args: Prisma.MissedMonthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissedMonthPayload>
          }
          aggregate: {
            args: Prisma.MissedMonthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMissedMonth>
          }
          groupBy: {
            args: Prisma.MissedMonthGroupByArgs<ExtArgs>
            result: $Utils.Optional<MissedMonthGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissedMonthCountArgs<ExtArgs>
            result: $Utils.Optional<MissedMonthCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    member?: MemberOmit
    relative?: RelativeOmit
    contribution?: ContributionOmit
    contributionType?: ContributionTypeOmit
    payment?: PaymentOmit
    balance?: BalanceOmit
    penalty?: PenaltyOmit
    missedMonth?: MissedMonthOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    relative: number
    Payment: number
    Balance: number
    Penalty: number
    Contribution: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relative?: boolean | MemberCountOutputTypeCountRelativeArgs
    Payment?: boolean | MemberCountOutputTypeCountPaymentArgs
    Balance?: boolean | MemberCountOutputTypeCountBalanceArgs
    Penalty?: boolean | MemberCountOutputTypeCountPenaltyArgs
    Contribution?: boolean | MemberCountOutputTypeCountContributionArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountRelativeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelativeWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPenaltyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PenaltyWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountContributionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContributionWhereInput
  }


  /**
   * Count Type ContributionCountOutputType
   */

  export type ContributionCountOutputType = {
    payment: number
    Balance: number
    Penalty: number
  }

  export type ContributionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | ContributionCountOutputTypeCountPaymentArgs
    Balance?: boolean | ContributionCountOutputTypeCountBalanceArgs
    Penalty?: boolean | ContributionCountOutputTypeCountPenaltyArgs
  }

  // Custom InputTypes
  /**
   * ContributionCountOutputType without action
   */
  export type ContributionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionCountOutputType
     */
    select?: ContributionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContributionCountOutputType without action
   */
  export type ContributionCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * ContributionCountOutputType without action
   */
  export type ContributionCountOutputTypeCountBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceWhereInput
  }

  /**
   * ContributionCountOutputType without action
   */
  export type ContributionCountOutputTypeCountPenaltyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PenaltyWhereInput
  }


  /**
   * Count Type ContributionTypeCountOutputType
   */

  export type ContributionTypeCountOutputType = {
    contributions: number
  }

  export type ContributionTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | ContributionTypeCountOutputTypeCountContributionsArgs
  }

  // Custom InputTypes
  /**
   * ContributionTypeCountOutputType without action
   */
  export type ContributionTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionTypeCountOutputType
     */
    select?: ContributionTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContributionTypeCountOutputType without action
   */
  export type ContributionTypeCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContributionWhereInput
  }


  /**
   * Count Type PenaltyCountOutputType
   */

  export type PenaltyCountOutputType = {
    missed_months: number
  }

  export type PenaltyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    missed_months?: boolean | PenaltyCountOutputTypeCountMissed_monthsArgs
  }

  // Custom InputTypes
  /**
   * PenaltyCountOutputType without action
   */
  export type PenaltyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCountOutputType
     */
    select?: PenaltyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PenaltyCountOutputType without action
   */
  export type PenaltyCountOutputTypeCountMissed_monthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissedMonthWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberAvgAggregateOutputType = {
    id: number | null
  }

  export type MemberSumAggregateOutputType = {
    id: number | null
  }

  export type MemberMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    second_name: string | null
    last_name: string | null
    profession: string | null
    title: string | null
    job_business: string | null
    id_number: string | null
    birth_date: Date | null
    citizen: string | null
    joined_date: Date | null
    end_date: Date | null
    wereda: string | null
    zone_or_district: string | null
    kebele: string | null
    sex: $Enums.Sex | null
    phone_number: string | null
    member_type: $Enums.MemberType | null
    document: string | null
    remark: string | null
    status: $Enums.Status | null
  }

  export type MemberMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    second_name: string | null
    last_name: string | null
    profession: string | null
    title: string | null
    job_business: string | null
    id_number: string | null
    birth_date: Date | null
    citizen: string | null
    joined_date: Date | null
    end_date: Date | null
    wereda: string | null
    zone_or_district: string | null
    kebele: string | null
    sex: $Enums.Sex | null
    phone_number: string | null
    member_type: $Enums.MemberType | null
    document: string | null
    remark: string | null
    status: $Enums.Status | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    first_name: number
    second_name: number
    last_name: number
    profession: number
    title: number
    job_business: number
    id_number: number
    birth_date: number
    citizen: number
    joined_date: number
    end_date: number
    wereda: number
    zone_or_district: number
    kebele: number
    sex: number
    phone_number: number
    member_type: number
    document: number
    remark: number
    status: number
    _all: number
  }


  export type MemberAvgAggregateInputType = {
    id?: true
  }

  export type MemberSumAggregateInputType = {
    id?: true
  }

  export type MemberMinAggregateInputType = {
    id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    profession?: true
    title?: true
    job_business?: true
    id_number?: true
    birth_date?: true
    citizen?: true
    joined_date?: true
    end_date?: true
    wereda?: true
    zone_or_district?: true
    kebele?: true
    sex?: true
    phone_number?: true
    member_type?: true
    document?: true
    remark?: true
    status?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    profession?: true
    title?: true
    job_business?: true
    id_number?: true
    birth_date?: true
    citizen?: true
    joined_date?: true
    end_date?: true
    wereda?: true
    zone_or_district?: true
    kebele?: true
    sex?: true
    phone_number?: true
    member_type?: true
    document?: true
    remark?: true
    status?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    profession?: true
    title?: true
    job_business?: true
    id_number?: true
    birth_date?: true
    citizen?: true
    joined_date?: true
    end_date?: true
    wereda?: true
    zone_or_district?: true
    kebele?: true
    sex?: true
    phone_number?: true
    member_type?: true
    document?: true
    remark?: true
    status?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _avg?: MemberAvgAggregateInputType
    _sum?: MemberSumAggregateInputType
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: number
    first_name: string
    second_name: string
    last_name: string
    profession: string | null
    title: string | null
    job_business: string | null
    id_number: string | null
    birth_date: Date
    citizen: string
    joined_date: Date
    end_date: Date | null
    wereda: string | null
    zone_or_district: string | null
    kebele: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document: string | null
    remark: string | null
    status: $Enums.Status
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    profession?: boolean
    title?: boolean
    job_business?: boolean
    id_number?: boolean
    birth_date?: boolean
    citizen?: boolean
    joined_date?: boolean
    end_date?: boolean
    wereda?: boolean
    zone_or_district?: boolean
    kebele?: boolean
    sex?: boolean
    phone_number?: boolean
    member_type?: boolean
    document?: boolean
    remark?: boolean
    status?: boolean
    relative?: boolean | Member$relativeArgs<ExtArgs>
    Payment?: boolean | Member$PaymentArgs<ExtArgs>
    Balance?: boolean | Member$BalanceArgs<ExtArgs>
    Penalty?: boolean | Member$PenaltyArgs<ExtArgs>
    Contribution?: boolean | Member$ContributionArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    profession?: boolean
    title?: boolean
    job_business?: boolean
    id_number?: boolean
    birth_date?: boolean
    citizen?: boolean
    joined_date?: boolean
    end_date?: boolean
    wereda?: boolean
    zone_or_district?: boolean
    kebele?: boolean
    sex?: boolean
    phone_number?: boolean
    member_type?: boolean
    document?: boolean
    remark?: boolean
    status?: boolean
  }, ExtArgs["result"]["member"]>

  export type MemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    profession?: boolean
    title?: boolean
    job_business?: boolean
    id_number?: boolean
    birth_date?: boolean
    citizen?: boolean
    joined_date?: boolean
    end_date?: boolean
    wereda?: boolean
    zone_or_district?: boolean
    kebele?: boolean
    sex?: boolean
    phone_number?: boolean
    member_type?: boolean
    document?: boolean
    remark?: boolean
    status?: boolean
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    profession?: boolean
    title?: boolean
    job_business?: boolean
    id_number?: boolean
    birth_date?: boolean
    citizen?: boolean
    joined_date?: boolean
    end_date?: boolean
    wereda?: boolean
    zone_or_district?: boolean
    kebele?: boolean
    sex?: boolean
    phone_number?: boolean
    member_type?: boolean
    document?: boolean
    remark?: boolean
    status?: boolean
  }

  export type MemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "second_name" | "last_name" | "profession" | "title" | "job_business" | "id_number" | "birth_date" | "citizen" | "joined_date" | "end_date" | "wereda" | "zone_or_district" | "kebele" | "sex" | "phone_number" | "member_type" | "document" | "remark" | "status", ExtArgs["result"]["member"]>
  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relative?: boolean | Member$relativeArgs<ExtArgs>
    Payment?: boolean | Member$PaymentArgs<ExtArgs>
    Balance?: boolean | Member$BalanceArgs<ExtArgs>
    Penalty?: boolean | Member$PenaltyArgs<ExtArgs>
    Contribution?: boolean | Member$ContributionArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      relative: Prisma.$RelativePayload<ExtArgs>[]
      Payment: Prisma.$PaymentPayload<ExtArgs>[]
      Balance: Prisma.$BalancePayload<ExtArgs>[]
      Penalty: Prisma.$PenaltyPayload<ExtArgs>[]
      Contribution: Prisma.$ContributionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      first_name: string
      second_name: string
      last_name: string
      profession: string | null
      title: string | null
      job_business: string | null
      id_number: string | null
      birth_date: Date
      citizen: string
      joined_date: Date
      end_date: Date | null
      wereda: string | null
      zone_or_district: string | null
      kebele: string | null
      sex: $Enums.Sex
      phone_number: string
      member_type: $Enums.MemberType
      document: string | null
      remark: string | null
      status: $Enums.Status
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members and returns the data updated in the database.
     * @param {MemberUpdateManyAndReturnArgs} args - Arguments to update many Members.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relative<T extends Member$relativeArgs<ExtArgs> = {}>(args?: Subset<T, Member$relativeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Payment<T extends Member$PaymentArgs<ExtArgs> = {}>(args?: Subset<T, Member$PaymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Balance<T extends Member$BalanceArgs<ExtArgs> = {}>(args?: Subset<T, Member$BalanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Penalty<T extends Member$PenaltyArgs<ExtArgs> = {}>(args?: Subset<T, Member$PenaltyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Contribution<T extends Member$ContributionArgs<ExtArgs> = {}>(args?: Subset<T, Member$ContributionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'Int'>
    readonly first_name: FieldRef<"Member", 'String'>
    readonly second_name: FieldRef<"Member", 'String'>
    readonly last_name: FieldRef<"Member", 'String'>
    readonly profession: FieldRef<"Member", 'String'>
    readonly title: FieldRef<"Member", 'String'>
    readonly job_business: FieldRef<"Member", 'String'>
    readonly id_number: FieldRef<"Member", 'String'>
    readonly birth_date: FieldRef<"Member", 'DateTime'>
    readonly citizen: FieldRef<"Member", 'String'>
    readonly joined_date: FieldRef<"Member", 'DateTime'>
    readonly end_date: FieldRef<"Member", 'DateTime'>
    readonly wereda: FieldRef<"Member", 'String'>
    readonly zone_or_district: FieldRef<"Member", 'String'>
    readonly kebele: FieldRef<"Member", 'String'>
    readonly sex: FieldRef<"Member", 'Sex'>
    readonly phone_number: FieldRef<"Member", 'String'>
    readonly member_type: FieldRef<"Member", 'MemberType'>
    readonly document: FieldRef<"Member", 'String'>
    readonly remark: FieldRef<"Member", 'String'>
    readonly status: FieldRef<"Member", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member updateManyAndReturn
   */
  export type MemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to delete.
     */
    limit?: number
  }

  /**
   * Member.relative
   */
  export type Member$relativeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    where?: RelativeWhereInput
    orderBy?: RelativeOrderByWithRelationInput | RelativeOrderByWithRelationInput[]
    cursor?: RelativeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelativeScalarFieldEnum | RelativeScalarFieldEnum[]
  }

  /**
   * Member.Payment
   */
  export type Member$PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Member.Balance
   */
  export type Member$BalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    where?: BalanceWhereInput
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    cursor?: BalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Member.Penalty
   */
  export type Member$PenaltyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    where?: PenaltyWhereInput
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    cursor?: PenaltyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PenaltyScalarFieldEnum | PenaltyScalarFieldEnum[]
  }

  /**
   * Member.Contribution
   */
  export type Member$ContributionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    where?: ContributionWhereInput
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    cursor?: ContributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionScalarFieldEnum | ContributionScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Relative
   */

  export type AggregateRelative = {
    _count: RelativeCountAggregateOutputType | null
    _avg: RelativeAvgAggregateOutputType | null
    _sum: RelativeSumAggregateOutputType | null
    _min: RelativeMinAggregateOutputType | null
    _max: RelativeMaxAggregateOutputType | null
  }

  export type RelativeAvgAggregateOutputType = {
    id: number | null
    member_id: number | null
  }

  export type RelativeSumAggregateOutputType = {
    id: number | null
    member_id: number | null
  }

  export type RelativeMinAggregateOutputType = {
    id: number | null
    member_id: number | null
    first_name: string | null
    second_name: string | null
    last_name: string | null
    relation_type: string | null
    status: $Enums.RelativeStatus | null
  }

  export type RelativeMaxAggregateOutputType = {
    id: number | null
    member_id: number | null
    first_name: string | null
    second_name: string | null
    last_name: string | null
    relation_type: string | null
    status: $Enums.RelativeStatus | null
  }

  export type RelativeCountAggregateOutputType = {
    id: number
    member_id: number
    first_name: number
    second_name: number
    last_name: number
    relation_type: number
    status: number
    _all: number
  }


  export type RelativeAvgAggregateInputType = {
    id?: true
    member_id?: true
  }

  export type RelativeSumAggregateInputType = {
    id?: true
    member_id?: true
  }

  export type RelativeMinAggregateInputType = {
    id?: true
    member_id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    relation_type?: true
    status?: true
  }

  export type RelativeMaxAggregateInputType = {
    id?: true
    member_id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    relation_type?: true
    status?: true
  }

  export type RelativeCountAggregateInputType = {
    id?: true
    member_id?: true
    first_name?: true
    second_name?: true
    last_name?: true
    relation_type?: true
    status?: true
    _all?: true
  }

  export type RelativeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relative to aggregate.
     */
    where?: RelativeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatives to fetch.
     */
    orderBy?: RelativeOrderByWithRelationInput | RelativeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelativeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Relatives
    **/
    _count?: true | RelativeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelativeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelativeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelativeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelativeMaxAggregateInputType
  }

  export type GetRelativeAggregateType<T extends RelativeAggregateArgs> = {
        [P in keyof T & keyof AggregateRelative]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelative[P]>
      : GetScalarType<T[P], AggregateRelative[P]>
  }




  export type RelativeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelativeWhereInput
    orderBy?: RelativeOrderByWithAggregationInput | RelativeOrderByWithAggregationInput[]
    by: RelativeScalarFieldEnum[] | RelativeScalarFieldEnum
    having?: RelativeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelativeCountAggregateInputType | true
    _avg?: RelativeAvgAggregateInputType
    _sum?: RelativeSumAggregateInputType
    _min?: RelativeMinAggregateInputType
    _max?: RelativeMaxAggregateInputType
  }

  export type RelativeGroupByOutputType = {
    id: number
    member_id: number
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
    _count: RelativeCountAggregateOutputType | null
    _avg: RelativeAvgAggregateOutputType | null
    _sum: RelativeSumAggregateOutputType | null
    _min: RelativeMinAggregateOutputType | null
    _max: RelativeMaxAggregateOutputType | null
  }

  type GetRelativeGroupByPayload<T extends RelativeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelativeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelativeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelativeGroupByOutputType[P]>
            : GetScalarType<T[P], RelativeGroupByOutputType[P]>
        }
      >
    >


  export type RelativeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    relation_type?: boolean
    status?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relative"]>

  export type RelativeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    relation_type?: boolean
    status?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relative"]>

  export type RelativeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    relation_type?: boolean
    status?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relative"]>

  export type RelativeSelectScalar = {
    id?: boolean
    member_id?: boolean
    first_name?: boolean
    second_name?: boolean
    last_name?: boolean
    relation_type?: boolean
    status?: boolean
  }

  export type RelativeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "member_id" | "first_name" | "second_name" | "last_name" | "relation_type" | "status", ExtArgs["result"]["relative"]>
  export type RelativeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type RelativeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type RelativeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $RelativePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Relative"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      member_id: number
      first_name: string
      second_name: string
      last_name: string
      relation_type: string
      status: $Enums.RelativeStatus
    }, ExtArgs["result"]["relative"]>
    composites: {}
  }

  type RelativeGetPayload<S extends boolean | null | undefined | RelativeDefaultArgs> = $Result.GetResult<Prisma.$RelativePayload, S>

  type RelativeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelativeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelativeCountAggregateInputType | true
    }

  export interface RelativeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Relative'], meta: { name: 'Relative' } }
    /**
     * Find zero or one Relative that matches the filter.
     * @param {RelativeFindUniqueArgs} args - Arguments to find a Relative
     * @example
     * // Get one Relative
     * const relative = await prisma.relative.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelativeFindUniqueArgs>(args: SelectSubset<T, RelativeFindUniqueArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Relative that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelativeFindUniqueOrThrowArgs} args - Arguments to find a Relative
     * @example
     * // Get one Relative
     * const relative = await prisma.relative.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelativeFindUniqueOrThrowArgs>(args: SelectSubset<T, RelativeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Relative that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeFindFirstArgs} args - Arguments to find a Relative
     * @example
     * // Get one Relative
     * const relative = await prisma.relative.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelativeFindFirstArgs>(args?: SelectSubset<T, RelativeFindFirstArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Relative that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeFindFirstOrThrowArgs} args - Arguments to find a Relative
     * @example
     * // Get one Relative
     * const relative = await prisma.relative.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelativeFindFirstOrThrowArgs>(args?: SelectSubset<T, RelativeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Relatives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relatives
     * const relatives = await prisma.relative.findMany()
     * 
     * // Get first 10 Relatives
     * const relatives = await prisma.relative.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relativeWithIdOnly = await prisma.relative.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelativeFindManyArgs>(args?: SelectSubset<T, RelativeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Relative.
     * @param {RelativeCreateArgs} args - Arguments to create a Relative.
     * @example
     * // Create one Relative
     * const Relative = await prisma.relative.create({
     *   data: {
     *     // ... data to create a Relative
     *   }
     * })
     * 
     */
    create<T extends RelativeCreateArgs>(args: SelectSubset<T, RelativeCreateArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Relatives.
     * @param {RelativeCreateManyArgs} args - Arguments to create many Relatives.
     * @example
     * // Create many Relatives
     * const relative = await prisma.relative.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelativeCreateManyArgs>(args?: SelectSubset<T, RelativeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Relatives and returns the data saved in the database.
     * @param {RelativeCreateManyAndReturnArgs} args - Arguments to create many Relatives.
     * @example
     * // Create many Relatives
     * const relative = await prisma.relative.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Relatives and only return the `id`
     * const relativeWithIdOnly = await prisma.relative.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelativeCreateManyAndReturnArgs>(args?: SelectSubset<T, RelativeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Relative.
     * @param {RelativeDeleteArgs} args - Arguments to delete one Relative.
     * @example
     * // Delete one Relative
     * const Relative = await prisma.relative.delete({
     *   where: {
     *     // ... filter to delete one Relative
     *   }
     * })
     * 
     */
    delete<T extends RelativeDeleteArgs>(args: SelectSubset<T, RelativeDeleteArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Relative.
     * @param {RelativeUpdateArgs} args - Arguments to update one Relative.
     * @example
     * // Update one Relative
     * const relative = await prisma.relative.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelativeUpdateArgs>(args: SelectSubset<T, RelativeUpdateArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Relatives.
     * @param {RelativeDeleteManyArgs} args - Arguments to filter Relatives to delete.
     * @example
     * // Delete a few Relatives
     * const { count } = await prisma.relative.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelativeDeleteManyArgs>(args?: SelectSubset<T, RelativeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relatives
     * const relative = await prisma.relative.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelativeUpdateManyArgs>(args: SelectSubset<T, RelativeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relatives and returns the data updated in the database.
     * @param {RelativeUpdateManyAndReturnArgs} args - Arguments to update many Relatives.
     * @example
     * // Update many Relatives
     * const relative = await prisma.relative.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Relatives and only return the `id`
     * const relativeWithIdOnly = await prisma.relative.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RelativeUpdateManyAndReturnArgs>(args: SelectSubset<T, RelativeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Relative.
     * @param {RelativeUpsertArgs} args - Arguments to update or create a Relative.
     * @example
     * // Update or create a Relative
     * const relative = await prisma.relative.upsert({
     *   create: {
     *     // ... data to create a Relative
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relative we want to update
     *   }
     * })
     */
    upsert<T extends RelativeUpsertArgs>(args: SelectSubset<T, RelativeUpsertArgs<ExtArgs>>): Prisma__RelativeClient<$Result.GetResult<Prisma.$RelativePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeCountArgs} args - Arguments to filter Relatives to count.
     * @example
     * // Count the number of Relatives
     * const count = await prisma.relative.count({
     *   where: {
     *     // ... the filter for the Relatives we want to count
     *   }
     * })
    **/
    count<T extends RelativeCountArgs>(
      args?: Subset<T, RelativeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelativeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relative.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelativeAggregateArgs>(args: Subset<T, RelativeAggregateArgs>): Prisma.PrismaPromise<GetRelativeAggregateType<T>>

    /**
     * Group by Relative.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelativeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelativeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelativeGroupByArgs['orderBy'] }
        : { orderBy?: RelativeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelativeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelativeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Relative model
   */
  readonly fields: RelativeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Relative.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelativeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Relative model
   */
  interface RelativeFieldRefs {
    readonly id: FieldRef<"Relative", 'Int'>
    readonly member_id: FieldRef<"Relative", 'Int'>
    readonly first_name: FieldRef<"Relative", 'String'>
    readonly second_name: FieldRef<"Relative", 'String'>
    readonly last_name: FieldRef<"Relative", 'String'>
    readonly relation_type: FieldRef<"Relative", 'String'>
    readonly status: FieldRef<"Relative", 'RelativeStatus'>
  }
    

  // Custom InputTypes
  /**
   * Relative findUnique
   */
  export type RelativeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter, which Relative to fetch.
     */
    where: RelativeWhereUniqueInput
  }

  /**
   * Relative findUniqueOrThrow
   */
  export type RelativeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter, which Relative to fetch.
     */
    where: RelativeWhereUniqueInput
  }

  /**
   * Relative findFirst
   */
  export type RelativeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter, which Relative to fetch.
     */
    where?: RelativeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatives to fetch.
     */
    orderBy?: RelativeOrderByWithRelationInput | RelativeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relatives.
     */
    cursor?: RelativeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relatives.
     */
    distinct?: RelativeScalarFieldEnum | RelativeScalarFieldEnum[]
  }

  /**
   * Relative findFirstOrThrow
   */
  export type RelativeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter, which Relative to fetch.
     */
    where?: RelativeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatives to fetch.
     */
    orderBy?: RelativeOrderByWithRelationInput | RelativeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relatives.
     */
    cursor?: RelativeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relatives.
     */
    distinct?: RelativeScalarFieldEnum | RelativeScalarFieldEnum[]
  }

  /**
   * Relative findMany
   */
  export type RelativeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter, which Relatives to fetch.
     */
    where?: RelativeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatives to fetch.
     */
    orderBy?: RelativeOrderByWithRelationInput | RelativeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Relatives.
     */
    cursor?: RelativeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatives.
     */
    skip?: number
    distinct?: RelativeScalarFieldEnum | RelativeScalarFieldEnum[]
  }

  /**
   * Relative create
   */
  export type RelativeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * The data needed to create a Relative.
     */
    data: XOR<RelativeCreateInput, RelativeUncheckedCreateInput>
  }

  /**
   * Relative createMany
   */
  export type RelativeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Relatives.
     */
    data: RelativeCreateManyInput | RelativeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Relative createManyAndReturn
   */
  export type RelativeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * The data used to create many Relatives.
     */
    data: RelativeCreateManyInput | RelativeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Relative update
   */
  export type RelativeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * The data needed to update a Relative.
     */
    data: XOR<RelativeUpdateInput, RelativeUncheckedUpdateInput>
    /**
     * Choose, which Relative to update.
     */
    where: RelativeWhereUniqueInput
  }

  /**
   * Relative updateMany
   */
  export type RelativeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Relatives.
     */
    data: XOR<RelativeUpdateManyMutationInput, RelativeUncheckedUpdateManyInput>
    /**
     * Filter which Relatives to update
     */
    where?: RelativeWhereInput
    /**
     * Limit how many Relatives to update.
     */
    limit?: number
  }

  /**
   * Relative updateManyAndReturn
   */
  export type RelativeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * The data used to update Relatives.
     */
    data: XOR<RelativeUpdateManyMutationInput, RelativeUncheckedUpdateManyInput>
    /**
     * Filter which Relatives to update
     */
    where?: RelativeWhereInput
    /**
     * Limit how many Relatives to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Relative upsert
   */
  export type RelativeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * The filter to search for the Relative to update in case it exists.
     */
    where: RelativeWhereUniqueInput
    /**
     * In case the Relative found by the `where` argument doesn't exist, create a new Relative with this data.
     */
    create: XOR<RelativeCreateInput, RelativeUncheckedCreateInput>
    /**
     * In case the Relative was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelativeUpdateInput, RelativeUncheckedUpdateInput>
  }

  /**
   * Relative delete
   */
  export type RelativeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
    /**
     * Filter which Relative to delete.
     */
    where: RelativeWhereUniqueInput
  }

  /**
   * Relative deleteMany
   */
  export type RelativeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relatives to delete
     */
    where?: RelativeWhereInput
    /**
     * Limit how many Relatives to delete.
     */
    limit?: number
  }

  /**
   * Relative without action
   */
  export type RelativeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relative
     */
    select?: RelativeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relative
     */
    omit?: RelativeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelativeInclude<ExtArgs> | null
  }


  /**
   * Model Contribution
   */

  export type AggregateContribution = {
    _count: ContributionCountAggregateOutputType | null
    _avg: ContributionAvgAggregateOutputType | null
    _sum: ContributionSumAggregateOutputType | null
    _min: ContributionMinAggregateOutputType | null
    _max: ContributionMaxAggregateOutputType | null
  }

  export type ContributionAvgAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_type_id: number | null
    random: number | null
    amount: Decimal | null
  }

  export type ContributionSumAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_type_id: number | null
    random: number | null
    amount: Decimal | null
  }

  export type ContributionMinAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_type_id: number | null
    random: number | null
    type_name: string | null
    amount: Decimal | null
    start_date: Date | null
    end_date: Date | null
  }

  export type ContributionMaxAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_type_id: number | null
    random: number | null
    type_name: string | null
    amount: Decimal | null
    start_date: Date | null
    end_date: Date | null
  }

  export type ContributionCountAggregateOutputType = {
    id: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: number
    amount: number
    start_date: number
    end_date: number
    _all: number
  }


  export type ContributionAvgAggregateInputType = {
    id?: true
    member_id?: true
    contribution_type_id?: true
    random?: true
    amount?: true
  }

  export type ContributionSumAggregateInputType = {
    id?: true
    member_id?: true
    contribution_type_id?: true
    random?: true
    amount?: true
  }

  export type ContributionMinAggregateInputType = {
    id?: true
    member_id?: true
    contribution_type_id?: true
    random?: true
    type_name?: true
    amount?: true
    start_date?: true
    end_date?: true
  }

  export type ContributionMaxAggregateInputType = {
    id?: true
    member_id?: true
    contribution_type_id?: true
    random?: true
    type_name?: true
    amount?: true
    start_date?: true
    end_date?: true
  }

  export type ContributionCountAggregateInputType = {
    id?: true
    member_id?: true
    contribution_type_id?: true
    random?: true
    type_name?: true
    amount?: true
    start_date?: true
    end_date?: true
    _all?: true
  }

  export type ContributionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contribution to aggregate.
     */
    where?: ContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contributions to fetch.
     */
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contributions
    **/
    _count?: true | ContributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionMaxAggregateInputType
  }

  export type GetContributionAggregateType<T extends ContributionAggregateArgs> = {
        [P in keyof T & keyof AggregateContribution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContribution[P]>
      : GetScalarType<T[P], AggregateContribution[P]>
  }




  export type ContributionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContributionWhereInput
    orderBy?: ContributionOrderByWithAggregationInput | ContributionOrderByWithAggregationInput[]
    by: ContributionScalarFieldEnum[] | ContributionScalarFieldEnum
    having?: ContributionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionCountAggregateInputType | true
    _avg?: ContributionAvgAggregateInputType
    _sum?: ContributionSumAggregateInputType
    _min?: ContributionMinAggregateInputType
    _max?: ContributionMaxAggregateInputType
  }

  export type ContributionGroupByOutputType = {
    id: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal
    start_date: Date
    end_date: Date
    _count: ContributionCountAggregateOutputType | null
    _avg: ContributionAvgAggregateOutputType | null
    _sum: ContributionSumAggregateOutputType | null
    _min: ContributionMinAggregateOutputType | null
    _max: ContributionMaxAggregateOutputType | null
  }

  type GetContributionGroupByPayload<T extends ContributionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContributionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionGroupByOutputType[P]>
        }
      >
    >


  export type ContributionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_type_id?: boolean
    random?: boolean
    type_name?: boolean
    amount?: boolean
    start_date?: boolean
    end_date?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
    payment?: boolean | Contribution$paymentArgs<ExtArgs>
    Balance?: boolean | Contribution$BalanceArgs<ExtArgs>
    Penalty?: boolean | Contribution$PenaltyArgs<ExtArgs>
    _count?: boolean | ContributionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contribution"]>

  export type ContributionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_type_id?: boolean
    random?: boolean
    type_name?: boolean
    amount?: boolean
    start_date?: boolean
    end_date?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contribution"]>

  export type ContributionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_type_id?: boolean
    random?: boolean
    type_name?: boolean
    amount?: boolean
    start_date?: boolean
    end_date?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contribution"]>

  export type ContributionSelectScalar = {
    id?: boolean
    member_id?: boolean
    contribution_type_id?: boolean
    random?: boolean
    type_name?: boolean
    amount?: boolean
    start_date?: boolean
    end_date?: boolean
  }

  export type ContributionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "member_id" | "contribution_type_id" | "random" | "type_name" | "amount" | "start_date" | "end_date", ExtArgs["result"]["contribution"]>
  export type ContributionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
    payment?: boolean | Contribution$paymentArgs<ExtArgs>
    Balance?: boolean | Contribution$BalanceArgs<ExtArgs>
    Penalty?: boolean | Contribution$PenaltyArgs<ExtArgs>
    _count?: boolean | ContributionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContributionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
  }
  export type ContributionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contributionType?: boolean | ContributionTypeDefaultArgs<ExtArgs>
  }

  export type $ContributionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contribution"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      contributionType: Prisma.$ContributionTypePayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs>[]
      Balance: Prisma.$BalancePayload<ExtArgs>[]
      Penalty: Prisma.$PenaltyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      member_id: number
      contribution_type_id: number
      random: number
      type_name: string
      amount: Prisma.Decimal
      start_date: Date
      end_date: Date
    }, ExtArgs["result"]["contribution"]>
    composites: {}
  }

  type ContributionGetPayload<S extends boolean | null | undefined | ContributionDefaultArgs> = $Result.GetResult<Prisma.$ContributionPayload, S>

  type ContributionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContributionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContributionCountAggregateInputType | true
    }

  export interface ContributionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contribution'], meta: { name: 'Contribution' } }
    /**
     * Find zero or one Contribution that matches the filter.
     * @param {ContributionFindUniqueArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContributionFindUniqueArgs>(args: SelectSubset<T, ContributionFindUniqueArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contribution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContributionFindUniqueOrThrowArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContributionFindUniqueOrThrowArgs>(args: SelectSubset<T, ContributionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contribution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionFindFirstArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContributionFindFirstArgs>(args?: SelectSubset<T, ContributionFindFirstArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contribution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionFindFirstOrThrowArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContributionFindFirstOrThrowArgs>(args?: SelectSubset<T, ContributionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contributions
     * const contributions = await prisma.contribution.findMany()
     * 
     * // Get first 10 Contributions
     * const contributions = await prisma.contribution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contributionWithIdOnly = await prisma.contribution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContributionFindManyArgs>(args?: SelectSubset<T, ContributionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contribution.
     * @param {ContributionCreateArgs} args - Arguments to create a Contribution.
     * @example
     * // Create one Contribution
     * const Contribution = await prisma.contribution.create({
     *   data: {
     *     // ... data to create a Contribution
     *   }
     * })
     * 
     */
    create<T extends ContributionCreateArgs>(args: SelectSubset<T, ContributionCreateArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contributions.
     * @param {ContributionCreateManyArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contribution = await prisma.contribution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContributionCreateManyArgs>(args?: SelectSubset<T, ContributionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contributions and returns the data saved in the database.
     * @param {ContributionCreateManyAndReturnArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contribution = await prisma.contribution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contributions and only return the `id`
     * const contributionWithIdOnly = await prisma.contribution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContributionCreateManyAndReturnArgs>(args?: SelectSubset<T, ContributionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contribution.
     * @param {ContributionDeleteArgs} args - Arguments to delete one Contribution.
     * @example
     * // Delete one Contribution
     * const Contribution = await prisma.contribution.delete({
     *   where: {
     *     // ... filter to delete one Contribution
     *   }
     * })
     * 
     */
    delete<T extends ContributionDeleteArgs>(args: SelectSubset<T, ContributionDeleteArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contribution.
     * @param {ContributionUpdateArgs} args - Arguments to update one Contribution.
     * @example
     * // Update one Contribution
     * const contribution = await prisma.contribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContributionUpdateArgs>(args: SelectSubset<T, ContributionUpdateArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contributions.
     * @param {ContributionDeleteManyArgs} args - Arguments to filter Contributions to delete.
     * @example
     * // Delete a few Contributions
     * const { count } = await prisma.contribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContributionDeleteManyArgs>(args?: SelectSubset<T, ContributionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contributions
     * const contribution = await prisma.contribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContributionUpdateManyArgs>(args: SelectSubset<T, ContributionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contributions and returns the data updated in the database.
     * @param {ContributionUpdateManyAndReturnArgs} args - Arguments to update many Contributions.
     * @example
     * // Update many Contributions
     * const contribution = await prisma.contribution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contributions and only return the `id`
     * const contributionWithIdOnly = await prisma.contribution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContributionUpdateManyAndReturnArgs>(args: SelectSubset<T, ContributionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contribution.
     * @param {ContributionUpsertArgs} args - Arguments to update or create a Contribution.
     * @example
     * // Update or create a Contribution
     * const contribution = await prisma.contribution.upsert({
     *   create: {
     *     // ... data to create a Contribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contribution we want to update
     *   }
     * })
     */
    upsert<T extends ContributionUpsertArgs>(args: SelectSubset<T, ContributionUpsertArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionCountArgs} args - Arguments to filter Contributions to count.
     * @example
     * // Count the number of Contributions
     * const count = await prisma.contribution.count({
     *   where: {
     *     // ... the filter for the Contributions we want to count
     *   }
     * })
    **/
    count<T extends ContributionCountArgs>(
      args?: Subset<T, ContributionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionAggregateArgs>(args: Subset<T, ContributionAggregateArgs>): Prisma.PrismaPromise<GetContributionAggregateType<T>>

    /**
     * Group by Contribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContributionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContributionGroupByArgs['orderBy'] }
        : { orderBy?: ContributionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contribution model
   */
  readonly fields: ContributionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContributionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contributionType<T extends ContributionTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContributionTypeDefaultArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment<T extends Contribution$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Contribution$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Balance<T extends Contribution$BalanceArgs<ExtArgs> = {}>(args?: Subset<T, Contribution$BalanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Penalty<T extends Contribution$PenaltyArgs<ExtArgs> = {}>(args?: Subset<T, Contribution$PenaltyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contribution model
   */
  interface ContributionFieldRefs {
    readonly id: FieldRef<"Contribution", 'Int'>
    readonly member_id: FieldRef<"Contribution", 'Int'>
    readonly contribution_type_id: FieldRef<"Contribution", 'Int'>
    readonly random: FieldRef<"Contribution", 'Int'>
    readonly type_name: FieldRef<"Contribution", 'String'>
    readonly amount: FieldRef<"Contribution", 'Decimal'>
    readonly start_date: FieldRef<"Contribution", 'DateTime'>
    readonly end_date: FieldRef<"Contribution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contribution findUnique
   */
  export type ContributionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter, which Contribution to fetch.
     */
    where: ContributionWhereUniqueInput
  }

  /**
   * Contribution findUniqueOrThrow
   */
  export type ContributionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter, which Contribution to fetch.
     */
    where: ContributionWhereUniqueInput
  }

  /**
   * Contribution findFirst
   */
  export type ContributionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter, which Contribution to fetch.
     */
    where?: ContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contributions to fetch.
     */
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contributions.
     */
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contributions.
     */
    distinct?: ContributionScalarFieldEnum | ContributionScalarFieldEnum[]
  }

  /**
   * Contribution findFirstOrThrow
   */
  export type ContributionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter, which Contribution to fetch.
     */
    where?: ContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contributions to fetch.
     */
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contributions.
     */
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contributions.
     */
    distinct?: ContributionScalarFieldEnum | ContributionScalarFieldEnum[]
  }

  /**
   * Contribution findMany
   */
  export type ContributionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter, which Contributions to fetch.
     */
    where?: ContributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contributions to fetch.
     */
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contributions.
     */
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
     */
    skip?: number
    distinct?: ContributionScalarFieldEnum | ContributionScalarFieldEnum[]
  }

  /**
   * Contribution create
   */
  export type ContributionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * The data needed to create a Contribution.
     */
    data: XOR<ContributionCreateInput, ContributionUncheckedCreateInput>
  }

  /**
   * Contribution createMany
   */
  export type ContributionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contributions.
     */
    data: ContributionCreateManyInput | ContributionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contribution createManyAndReturn
   */
  export type ContributionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * The data used to create many Contributions.
     */
    data: ContributionCreateManyInput | ContributionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contribution update
   */
  export type ContributionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * The data needed to update a Contribution.
     */
    data: XOR<ContributionUpdateInput, ContributionUncheckedUpdateInput>
    /**
     * Choose, which Contribution to update.
     */
    where: ContributionWhereUniqueInput
  }

  /**
   * Contribution updateMany
   */
  export type ContributionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contributions.
     */
    data: XOR<ContributionUpdateManyMutationInput, ContributionUncheckedUpdateManyInput>
    /**
     * Filter which Contributions to update
     */
    where?: ContributionWhereInput
    /**
     * Limit how many Contributions to update.
     */
    limit?: number
  }

  /**
   * Contribution updateManyAndReturn
   */
  export type ContributionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * The data used to update Contributions.
     */
    data: XOR<ContributionUpdateManyMutationInput, ContributionUncheckedUpdateManyInput>
    /**
     * Filter which Contributions to update
     */
    where?: ContributionWhereInput
    /**
     * Limit how many Contributions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contribution upsert
   */
  export type ContributionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * The filter to search for the Contribution to update in case it exists.
     */
    where: ContributionWhereUniqueInput
    /**
     * In case the Contribution found by the `where` argument doesn't exist, create a new Contribution with this data.
     */
    create: XOR<ContributionCreateInput, ContributionUncheckedCreateInput>
    /**
     * In case the Contribution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContributionUpdateInput, ContributionUncheckedUpdateInput>
  }

  /**
   * Contribution delete
   */
  export type ContributionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    /**
     * Filter which Contribution to delete.
     */
    where: ContributionWhereUniqueInput
  }

  /**
   * Contribution deleteMany
   */
  export type ContributionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contributions to delete
     */
    where?: ContributionWhereInput
    /**
     * Limit how many Contributions to delete.
     */
    limit?: number
  }

  /**
   * Contribution.payment
   */
  export type Contribution$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Contribution.Balance
   */
  export type Contribution$BalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    where?: BalanceWhereInput
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    cursor?: BalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Contribution.Penalty
   */
  export type Contribution$PenaltyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    where?: PenaltyWhereInput
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    cursor?: PenaltyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PenaltyScalarFieldEnum | PenaltyScalarFieldEnum[]
  }

  /**
   * Contribution without action
   */
  export type ContributionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
  }


  /**
   * Model ContributionType
   */

  export type AggregateContributionType = {
    _count: ContributionTypeCountAggregateOutputType | null
    _avg: ContributionTypeAvgAggregateOutputType | null
    _sum: ContributionTypeSumAggregateOutputType | null
    _min: ContributionTypeMinAggregateOutputType | null
    _max: ContributionTypeMaxAggregateOutputType | null
  }

  export type ContributionTypeAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
  }

  export type ContributionTypeSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
  }

  export type ContributionTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    amount: Decimal | null
    is_active: boolean | null
    is_for_all: boolean | null
    created_at: Date | null
    start_date: Date | null
    end_date: Date | null
  }

  export type ContributionTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    amount: Decimal | null
    is_active: boolean | null
    is_for_all: boolean | null
    created_at: Date | null
    start_date: Date | null
    end_date: Date | null
  }

  export type ContributionTypeCountAggregateOutputType = {
    id: number
    name: number
    amount: number
    is_active: number
    is_for_all: number
    created_at: number
    start_date: number
    end_date: number
    _all: number
  }


  export type ContributionTypeAvgAggregateInputType = {
    id?: true
    amount?: true
  }

  export type ContributionTypeSumAggregateInputType = {
    id?: true
    amount?: true
  }

  export type ContributionTypeMinAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    is_active?: true
    is_for_all?: true
    created_at?: true
    start_date?: true
    end_date?: true
  }

  export type ContributionTypeMaxAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    is_active?: true
    is_for_all?: true
    created_at?: true
    start_date?: true
    end_date?: true
  }

  export type ContributionTypeCountAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    is_active?: true
    is_for_all?: true
    created_at?: true
    start_date?: true
    end_date?: true
    _all?: true
  }

  export type ContributionTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContributionType to aggregate.
     */
    where?: ContributionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionTypes to fetch.
     */
    orderBy?: ContributionTypeOrderByWithRelationInput | ContributionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContributionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContributionTypes
    **/
    _count?: true | ContributionTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionTypeMaxAggregateInputType
  }

  export type GetContributionTypeAggregateType<T extends ContributionTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateContributionType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributionType[P]>
      : GetScalarType<T[P], AggregateContributionType[P]>
  }




  export type ContributionTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContributionTypeWhereInput
    orderBy?: ContributionTypeOrderByWithAggregationInput | ContributionTypeOrderByWithAggregationInput[]
    by: ContributionTypeScalarFieldEnum[] | ContributionTypeScalarFieldEnum
    having?: ContributionTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionTypeCountAggregateInputType | true
    _avg?: ContributionTypeAvgAggregateInputType
    _sum?: ContributionTypeSumAggregateInputType
    _min?: ContributionTypeMinAggregateInputType
    _max?: ContributionTypeMaxAggregateInputType
  }

  export type ContributionTypeGroupByOutputType = {
    id: number
    name: string
    amount: Decimal
    is_active: boolean
    is_for_all: boolean
    created_at: Date
    start_date: Date | null
    end_date: Date | null
    _count: ContributionTypeCountAggregateOutputType | null
    _avg: ContributionTypeAvgAggregateOutputType | null
    _sum: ContributionTypeSumAggregateOutputType | null
    _min: ContributionTypeMinAggregateOutputType | null
    _max: ContributionTypeMaxAggregateOutputType | null
  }

  type GetContributionTypeGroupByPayload<T extends ContributionTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContributionTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionTypeGroupByOutputType[P]>
        }
      >
    >


  export type ContributionTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    amount?: boolean
    is_active?: boolean
    is_for_all?: boolean
    created_at?: boolean
    start_date?: boolean
    end_date?: boolean
    contributions?: boolean | ContributionType$contributionsArgs<ExtArgs>
    _count?: boolean | ContributionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contributionType"]>

  export type ContributionTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    amount?: boolean
    is_active?: boolean
    is_for_all?: boolean
    created_at?: boolean
    start_date?: boolean
    end_date?: boolean
  }, ExtArgs["result"]["contributionType"]>

  export type ContributionTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    amount?: boolean
    is_active?: boolean
    is_for_all?: boolean
    created_at?: boolean
    start_date?: boolean
    end_date?: boolean
  }, ExtArgs["result"]["contributionType"]>

  export type ContributionTypeSelectScalar = {
    id?: boolean
    name?: boolean
    amount?: boolean
    is_active?: boolean
    is_for_all?: boolean
    created_at?: boolean
    start_date?: boolean
    end_date?: boolean
  }

  export type ContributionTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "amount" | "is_active" | "is_for_all" | "created_at" | "start_date" | "end_date", ExtArgs["result"]["contributionType"]>
  export type ContributionTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | ContributionType$contributionsArgs<ExtArgs>
    _count?: boolean | ContributionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContributionTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ContributionTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContributionTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContributionType"
    objects: {
      contributions: Prisma.$ContributionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      amount: Prisma.Decimal
      is_active: boolean
      is_for_all: boolean
      created_at: Date
      start_date: Date | null
      end_date: Date | null
    }, ExtArgs["result"]["contributionType"]>
    composites: {}
  }

  type ContributionTypeGetPayload<S extends boolean | null | undefined | ContributionTypeDefaultArgs> = $Result.GetResult<Prisma.$ContributionTypePayload, S>

  type ContributionTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContributionTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContributionTypeCountAggregateInputType | true
    }

  export interface ContributionTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContributionType'], meta: { name: 'ContributionType' } }
    /**
     * Find zero or one ContributionType that matches the filter.
     * @param {ContributionTypeFindUniqueArgs} args - Arguments to find a ContributionType
     * @example
     * // Get one ContributionType
     * const contributionType = await prisma.contributionType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContributionTypeFindUniqueArgs>(args: SelectSubset<T, ContributionTypeFindUniqueArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContributionType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContributionTypeFindUniqueOrThrowArgs} args - Arguments to find a ContributionType
     * @example
     * // Get one ContributionType
     * const contributionType = await prisma.contributionType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContributionTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ContributionTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContributionType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeFindFirstArgs} args - Arguments to find a ContributionType
     * @example
     * // Get one ContributionType
     * const contributionType = await prisma.contributionType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContributionTypeFindFirstArgs>(args?: SelectSubset<T, ContributionTypeFindFirstArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContributionType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeFindFirstOrThrowArgs} args - Arguments to find a ContributionType
     * @example
     * // Get one ContributionType
     * const contributionType = await prisma.contributionType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContributionTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ContributionTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContributionTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributionTypes
     * const contributionTypes = await prisma.contributionType.findMany()
     * 
     * // Get first 10 ContributionTypes
     * const contributionTypes = await prisma.contributionType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contributionTypeWithIdOnly = await prisma.contributionType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContributionTypeFindManyArgs>(args?: SelectSubset<T, ContributionTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContributionType.
     * @param {ContributionTypeCreateArgs} args - Arguments to create a ContributionType.
     * @example
     * // Create one ContributionType
     * const ContributionType = await prisma.contributionType.create({
     *   data: {
     *     // ... data to create a ContributionType
     *   }
     * })
     * 
     */
    create<T extends ContributionTypeCreateArgs>(args: SelectSubset<T, ContributionTypeCreateArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContributionTypes.
     * @param {ContributionTypeCreateManyArgs} args - Arguments to create many ContributionTypes.
     * @example
     * // Create many ContributionTypes
     * const contributionType = await prisma.contributionType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContributionTypeCreateManyArgs>(args?: SelectSubset<T, ContributionTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContributionTypes and returns the data saved in the database.
     * @param {ContributionTypeCreateManyAndReturnArgs} args - Arguments to create many ContributionTypes.
     * @example
     * // Create many ContributionTypes
     * const contributionType = await prisma.contributionType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContributionTypes and only return the `id`
     * const contributionTypeWithIdOnly = await prisma.contributionType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContributionTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ContributionTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContributionType.
     * @param {ContributionTypeDeleteArgs} args - Arguments to delete one ContributionType.
     * @example
     * // Delete one ContributionType
     * const ContributionType = await prisma.contributionType.delete({
     *   where: {
     *     // ... filter to delete one ContributionType
     *   }
     * })
     * 
     */
    delete<T extends ContributionTypeDeleteArgs>(args: SelectSubset<T, ContributionTypeDeleteArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContributionType.
     * @param {ContributionTypeUpdateArgs} args - Arguments to update one ContributionType.
     * @example
     * // Update one ContributionType
     * const contributionType = await prisma.contributionType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContributionTypeUpdateArgs>(args: SelectSubset<T, ContributionTypeUpdateArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContributionTypes.
     * @param {ContributionTypeDeleteManyArgs} args - Arguments to filter ContributionTypes to delete.
     * @example
     * // Delete a few ContributionTypes
     * const { count } = await prisma.contributionType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContributionTypeDeleteManyArgs>(args?: SelectSubset<T, ContributionTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContributionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributionTypes
     * const contributionType = await prisma.contributionType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContributionTypeUpdateManyArgs>(args: SelectSubset<T, ContributionTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContributionTypes and returns the data updated in the database.
     * @param {ContributionTypeUpdateManyAndReturnArgs} args - Arguments to update many ContributionTypes.
     * @example
     * // Update many ContributionTypes
     * const contributionType = await prisma.contributionType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContributionTypes and only return the `id`
     * const contributionTypeWithIdOnly = await prisma.contributionType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContributionTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ContributionTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContributionType.
     * @param {ContributionTypeUpsertArgs} args - Arguments to update or create a ContributionType.
     * @example
     * // Update or create a ContributionType
     * const contributionType = await prisma.contributionType.upsert({
     *   create: {
     *     // ... data to create a ContributionType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributionType we want to update
     *   }
     * })
     */
    upsert<T extends ContributionTypeUpsertArgs>(args: SelectSubset<T, ContributionTypeUpsertArgs<ExtArgs>>): Prisma__ContributionTypeClient<$Result.GetResult<Prisma.$ContributionTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContributionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeCountArgs} args - Arguments to filter ContributionTypes to count.
     * @example
     * // Count the number of ContributionTypes
     * const count = await prisma.contributionType.count({
     *   where: {
     *     // ... the filter for the ContributionTypes we want to count
     *   }
     * })
    **/
    count<T extends ContributionTypeCountArgs>(
      args?: Subset<T, ContributionTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContributionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionTypeAggregateArgs>(args: Subset<T, ContributionTypeAggregateArgs>): Prisma.PrismaPromise<GetContributionTypeAggregateType<T>>

    /**
     * Group by ContributionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContributionTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContributionTypeGroupByArgs['orderBy'] }
        : { orderBy?: ContributionTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContributionTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContributionType model
   */
  readonly fields: ContributionTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributionType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContributionTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends ContributionType$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, ContributionType$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContributionType model
   */
  interface ContributionTypeFieldRefs {
    readonly id: FieldRef<"ContributionType", 'Int'>
    readonly name: FieldRef<"ContributionType", 'String'>
    readonly amount: FieldRef<"ContributionType", 'Decimal'>
    readonly is_active: FieldRef<"ContributionType", 'Boolean'>
    readonly is_for_all: FieldRef<"ContributionType", 'Boolean'>
    readonly created_at: FieldRef<"ContributionType", 'DateTime'>
    readonly start_date: FieldRef<"ContributionType", 'DateTime'>
    readonly end_date: FieldRef<"ContributionType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContributionType findUnique
   */
  export type ContributionTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContributionType to fetch.
     */
    where: ContributionTypeWhereUniqueInput
  }

  /**
   * ContributionType findUniqueOrThrow
   */
  export type ContributionTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContributionType to fetch.
     */
    where: ContributionTypeWhereUniqueInput
  }

  /**
   * ContributionType findFirst
   */
  export type ContributionTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContributionType to fetch.
     */
    where?: ContributionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionTypes to fetch.
     */
    orderBy?: ContributionTypeOrderByWithRelationInput | ContributionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContributionTypes.
     */
    cursor?: ContributionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContributionTypes.
     */
    distinct?: ContributionTypeScalarFieldEnum | ContributionTypeScalarFieldEnum[]
  }

  /**
   * ContributionType findFirstOrThrow
   */
  export type ContributionTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContributionType to fetch.
     */
    where?: ContributionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionTypes to fetch.
     */
    orderBy?: ContributionTypeOrderByWithRelationInput | ContributionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContributionTypes.
     */
    cursor?: ContributionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContributionTypes.
     */
    distinct?: ContributionTypeScalarFieldEnum | ContributionTypeScalarFieldEnum[]
  }

  /**
   * ContributionType findMany
   */
  export type ContributionTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter, which ContributionTypes to fetch.
     */
    where?: ContributionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContributionTypes to fetch.
     */
    orderBy?: ContributionTypeOrderByWithRelationInput | ContributionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContributionTypes.
     */
    cursor?: ContributionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionTypes.
     */
    skip?: number
    distinct?: ContributionTypeScalarFieldEnum | ContributionTypeScalarFieldEnum[]
  }

  /**
   * ContributionType create
   */
  export type ContributionTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ContributionType.
     */
    data: XOR<ContributionTypeCreateInput, ContributionTypeUncheckedCreateInput>
  }

  /**
   * ContributionType createMany
   */
  export type ContributionTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContributionTypes.
     */
    data: ContributionTypeCreateManyInput | ContributionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContributionType createManyAndReturn
   */
  export type ContributionTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ContributionTypes.
     */
    data: ContributionTypeCreateManyInput | ContributionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContributionType update
   */
  export type ContributionTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ContributionType.
     */
    data: XOR<ContributionTypeUpdateInput, ContributionTypeUncheckedUpdateInput>
    /**
     * Choose, which ContributionType to update.
     */
    where: ContributionTypeWhereUniqueInput
  }

  /**
   * ContributionType updateMany
   */
  export type ContributionTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContributionTypes.
     */
    data: XOR<ContributionTypeUpdateManyMutationInput, ContributionTypeUncheckedUpdateManyInput>
    /**
     * Filter which ContributionTypes to update
     */
    where?: ContributionTypeWhereInput
    /**
     * Limit how many ContributionTypes to update.
     */
    limit?: number
  }

  /**
   * ContributionType updateManyAndReturn
   */
  export type ContributionTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * The data used to update ContributionTypes.
     */
    data: XOR<ContributionTypeUpdateManyMutationInput, ContributionTypeUncheckedUpdateManyInput>
    /**
     * Filter which ContributionTypes to update
     */
    where?: ContributionTypeWhereInput
    /**
     * Limit how many ContributionTypes to update.
     */
    limit?: number
  }

  /**
   * ContributionType upsert
   */
  export type ContributionTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ContributionType to update in case it exists.
     */
    where: ContributionTypeWhereUniqueInput
    /**
     * In case the ContributionType found by the `where` argument doesn't exist, create a new ContributionType with this data.
     */
    create: XOR<ContributionTypeCreateInput, ContributionTypeUncheckedCreateInput>
    /**
     * In case the ContributionType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContributionTypeUpdateInput, ContributionTypeUncheckedUpdateInput>
  }

  /**
   * ContributionType delete
   */
  export type ContributionTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
    /**
     * Filter which ContributionType to delete.
     */
    where: ContributionTypeWhereUniqueInput
  }

  /**
   * ContributionType deleteMany
   */
  export type ContributionTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContributionTypes to delete
     */
    where?: ContributionTypeWhereInput
    /**
     * Limit how many ContributionTypes to delete.
     */
    limit?: number
  }

  /**
   * ContributionType.contributions
   */
  export type ContributionType$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contribution
     */
    select?: ContributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contribution
     */
    omit?: ContributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionInclude<ExtArgs> | null
    where?: ContributionWhereInput
    orderBy?: ContributionOrderByWithRelationInput | ContributionOrderByWithRelationInput[]
    cursor?: ContributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionScalarFieldEnum | ContributionScalarFieldEnum[]
  }

  /**
   * ContributionType without action
   */
  export type ContributionTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionType
     */
    select?: ContributionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContributionType
     */
    omit?: ContributionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContributionTypeInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    contribution_id: number | null
    member_id: number | null
    paid_amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    contribution_id: number | null
    member_id: number | null
    paid_amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    contribution_id: number | null
    member_id: number | null
    payment_date: Date | null
    payment_month: string | null
    paid_amount: Decimal | null
    payment_method: string | null
    document: string | null
    created_at: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    contribution_id: number | null
    member_id: number | null
    payment_date: Date | null
    payment_month: string | null
    paid_amount: Decimal | null
    payment_method: string | null
    document: string | null
    created_at: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    contribution_id: number
    member_id: number
    payment_date: number
    payment_month: number
    paid_amount: number
    payment_method: number
    document: number
    created_at: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    contribution_id?: true
    member_id?: true
    paid_amount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    contribution_id?: true
    member_id?: true
    paid_amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    contribution_id?: true
    member_id?: true
    payment_date?: true
    payment_month?: true
    paid_amount?: true
    payment_method?: true
    document?: true
    created_at?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    contribution_id?: true
    member_id?: true
    payment_date?: true
    payment_month?: true
    paid_amount?: true
    payment_method?: true
    document?: true
    created_at?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    contribution_id?: true
    member_id?: true
    payment_date?: true
    payment_month?: true
    paid_amount?: true
    payment_method?: true
    document?: true
    created_at?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    contribution_id: number
    member_id: number
    payment_date: Date
    payment_month: string
    paid_amount: Decimal
    payment_method: string
    document: string
    created_at: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contribution_id?: boolean
    member_id?: boolean
    payment_date?: boolean
    payment_month?: boolean
    paid_amount?: boolean
    payment_method?: boolean
    document?: boolean
    created_at?: boolean
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contribution_id?: boolean
    member_id?: boolean
    payment_date?: boolean
    payment_month?: boolean
    paid_amount?: boolean
    payment_method?: boolean
    document?: boolean
    created_at?: boolean
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contribution_id?: boolean
    member_id?: boolean
    payment_date?: boolean
    payment_month?: boolean
    paid_amount?: boolean
    payment_method?: boolean
    document?: boolean
    created_at?: boolean
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    contribution_id?: boolean
    member_id?: boolean
    payment_date?: boolean
    payment_month?: boolean
    paid_amount?: boolean
    payment_method?: boolean
    document?: boolean
    created_at?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contribution_id" | "member_id" | "payment_date" | "payment_month" | "paid_amount" | "payment_method" | "document" | "created_at", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      contribution: Prisma.$ContributionPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contribution_id: number
      member_id: number
      payment_date: Date
      payment_month: string
      paid_amount: Prisma.Decimal
      payment_method: string
      document: string
      created_at: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contribution<T extends ContributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContributionDefaultArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly contribution_id: FieldRef<"Payment", 'Int'>
    readonly member_id: FieldRef<"Payment", 'Int'>
    readonly payment_date: FieldRef<"Payment", 'DateTime'>
    readonly payment_month: FieldRef<"Payment", 'String'>
    readonly paid_amount: FieldRef<"Payment", 'Decimal'>
    readonly payment_method: FieldRef<"Payment", 'String'>
    readonly document: FieldRef<"Payment", 'String'>
    readonly created_at: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Balance
   */

  export type AggregateBalance = {
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  export type BalanceAvgAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
  }

  export type BalanceSumAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
  }

  export type BalanceMinAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
    updated_at: Date | null
  }

  export type BalanceMaxAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
    updated_at: Date | null
  }

  export type BalanceCountAggregateOutputType = {
    id: number
    member_id: number
    contribution_id: number
    amount: number
    updated_at: number
    _all: number
  }


  export type BalanceAvgAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
  }

  export type BalanceSumAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
  }

  export type BalanceMinAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
    updated_at?: true
  }

  export type BalanceMaxAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
    updated_at?: true
  }

  export type BalanceCountAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
    updated_at?: true
    _all?: true
  }

  export type BalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balance to aggregate.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Balances
    **/
    _count?: true | BalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalanceMaxAggregateInputType
  }

  export type GetBalanceAggregateType<T extends BalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance[P]>
      : GetScalarType<T[P], AggregateBalance[P]>
  }




  export type BalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceWhereInput
    orderBy?: BalanceOrderByWithAggregationInput | BalanceOrderByWithAggregationInput[]
    by: BalanceScalarFieldEnum[] | BalanceScalarFieldEnum
    having?: BalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalanceCountAggregateInputType | true
    _avg?: BalanceAvgAggregateInputType
    _sum?: BalanceSumAggregateInputType
    _min?: BalanceMinAggregateInputType
    _max?: BalanceMaxAggregateInputType
  }

  export type BalanceGroupByOutputType = {
    id: number
    member_id: number
    contribution_id: number
    amount: Decimal
    updated_at: Date
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  type GetBalanceGroupByPayload<T extends BalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalanceGroupByOutputType[P]>
            : GetScalarType<T[P], BalanceGroupByOutputType[P]>
        }
      >
    >


  export type BalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    amount?: boolean
    updated_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    amount?: boolean
    updated_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    amount?: boolean
    updated_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectScalar = {
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    amount?: boolean
    updated_at?: boolean
  }

  export type BalanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "member_id" | "contribution_id" | "amount" | "updated_at", ExtArgs["result"]["balance"]>
  export type BalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }
  export type BalanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }
  export type BalanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }

  export type $BalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Balance"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      contribution: Prisma.$ContributionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      member_id: number
      contribution_id: number
      amount: Prisma.Decimal
      updated_at: Date
    }, ExtArgs["result"]["balance"]>
    composites: {}
  }

  type BalanceGetPayload<S extends boolean | null | undefined | BalanceDefaultArgs> = $Result.GetResult<Prisma.$BalancePayload, S>

  type BalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BalanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BalanceCountAggregateInputType | true
    }

  export interface BalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Balance'], meta: { name: 'Balance' } }
    /**
     * Find zero or one Balance that matches the filter.
     * @param {BalanceFindUniqueArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BalanceFindUniqueArgs>(args: SelectSubset<T, BalanceFindUniqueArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Balance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BalanceFindUniqueOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BalanceFindUniqueOrThrowArgs>(args: SelectSubset<T, BalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Balance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BalanceFindFirstArgs>(args?: SelectSubset<T, BalanceFindFirstArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Balance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BalanceFindFirstOrThrowArgs>(args?: SelectSubset<T, BalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Balances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balances
     * const balances = await prisma.balance.findMany()
     * 
     * // Get first 10 Balances
     * const balances = await prisma.balance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balanceWithIdOnly = await prisma.balance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BalanceFindManyArgs>(args?: SelectSubset<T, BalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Balance.
     * @param {BalanceCreateArgs} args - Arguments to create a Balance.
     * @example
     * // Create one Balance
     * const Balance = await prisma.balance.create({
     *   data: {
     *     // ... data to create a Balance
     *   }
     * })
     * 
     */
    create<T extends BalanceCreateArgs>(args: SelectSubset<T, BalanceCreateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Balances.
     * @param {BalanceCreateManyArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BalanceCreateManyArgs>(args?: SelectSubset<T, BalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Balances and returns the data saved in the database.
     * @param {BalanceCreateManyAndReturnArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Balances and only return the `id`
     * const balanceWithIdOnly = await prisma.balance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BalanceCreateManyAndReturnArgs>(args?: SelectSubset<T, BalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Balance.
     * @param {BalanceDeleteArgs} args - Arguments to delete one Balance.
     * @example
     * // Delete one Balance
     * const Balance = await prisma.balance.delete({
     *   where: {
     *     // ... filter to delete one Balance
     *   }
     * })
     * 
     */
    delete<T extends BalanceDeleteArgs>(args: SelectSubset<T, BalanceDeleteArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Balance.
     * @param {BalanceUpdateArgs} args - Arguments to update one Balance.
     * @example
     * // Update one Balance
     * const balance = await prisma.balance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BalanceUpdateArgs>(args: SelectSubset<T, BalanceUpdateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Balances.
     * @param {BalanceDeleteManyArgs} args - Arguments to filter Balances to delete.
     * @example
     * // Delete a few Balances
     * const { count } = await prisma.balance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BalanceDeleteManyArgs>(args?: SelectSubset<T, BalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balances
     * const balance = await prisma.balance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BalanceUpdateManyArgs>(args: SelectSubset<T, BalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balances and returns the data updated in the database.
     * @param {BalanceUpdateManyAndReturnArgs} args - Arguments to update many Balances.
     * @example
     * // Update many Balances
     * const balance = await prisma.balance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Balances and only return the `id`
     * const balanceWithIdOnly = await prisma.balance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BalanceUpdateManyAndReturnArgs>(args: SelectSubset<T, BalanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Balance.
     * @param {BalanceUpsertArgs} args - Arguments to update or create a Balance.
     * @example
     * // Update or create a Balance
     * const balance = await prisma.balance.upsert({
     *   create: {
     *     // ... data to create a Balance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance we want to update
     *   }
     * })
     */
    upsert<T extends BalanceUpsertArgs>(args: SelectSubset<T, BalanceUpsertArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceCountArgs} args - Arguments to filter Balances to count.
     * @example
     * // Count the number of Balances
     * const count = await prisma.balance.count({
     *   where: {
     *     // ... the filter for the Balances we want to count
     *   }
     * })
    **/
    count<T extends BalanceCountArgs>(
      args?: Subset<T, BalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalanceAggregateArgs>(args: Subset<T, BalanceAggregateArgs>): Prisma.PrismaPromise<GetBalanceAggregateType<T>>

    /**
     * Group by Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalanceGroupByArgs['orderBy'] }
        : { orderBy?: BalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Balance model
   */
  readonly fields: BalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Balance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contribution<T extends ContributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContributionDefaultArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Balance model
   */
  interface BalanceFieldRefs {
    readonly id: FieldRef<"Balance", 'Int'>
    readonly member_id: FieldRef<"Balance", 'Int'>
    readonly contribution_id: FieldRef<"Balance", 'Int'>
    readonly amount: FieldRef<"Balance", 'Decimal'>
    readonly updated_at: FieldRef<"Balance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Balance findUnique
   */
  export type BalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findUniqueOrThrow
   */
  export type BalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findFirst
   */
  export type BalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findFirstOrThrow
   */
  export type BalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findMany
   */
  export type BalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter, which Balances to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance create
   */
  export type BalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Balance.
     */
    data: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
  }

  /**
   * Balance createMany
   */
  export type BalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Balance createManyAndReturn
   */
  export type BalanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Balance update
   */
  export type BalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Balance.
     */
    data: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
    /**
     * Choose, which Balance to update.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance updateMany
   */
  export type BalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Balances.
     */
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyInput>
    /**
     * Filter which Balances to update
     */
    where?: BalanceWhereInput
    /**
     * Limit how many Balances to update.
     */
    limit?: number
  }

  /**
   * Balance updateManyAndReturn
   */
  export type BalanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * The data used to update Balances.
     */
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyInput>
    /**
     * Filter which Balances to update
     */
    where?: BalanceWhereInput
    /**
     * Limit how many Balances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Balance upsert
   */
  export type BalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Balance to update in case it exists.
     */
    where: BalanceWhereUniqueInput
    /**
     * In case the Balance found by the `where` argument doesn't exist, create a new Balance with this data.
     */
    create: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
    /**
     * In case the Balance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
  }

  /**
   * Balance delete
   */
  export type BalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
    /**
     * Filter which Balance to delete.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance deleteMany
   */
  export type BalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balances to delete
     */
    where?: BalanceWhereInput
    /**
     * Limit how many Balances to delete.
     */
    limit?: number
  }

  /**
   * Balance without action
   */
  export type BalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Balance
     */
    omit?: BalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceInclude<ExtArgs> | null
  }


  /**
   * Model Penalty
   */

  export type AggregatePenalty = {
    _count: PenaltyCountAggregateOutputType | null
    _avg: PenaltyAvgAggregateOutputType | null
    _sum: PenaltySumAggregateOutputType | null
    _min: PenaltyMinAggregateOutputType | null
    _max: PenaltyMaxAggregateOutputType | null
  }

  export type PenaltyAvgAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
  }

  export type PenaltySumAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    amount: Decimal | null
  }

  export type PenaltyMinAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    reason: string | null
    amount: Decimal | null
    applied_at: Date | null
    resolved_at: Date | null
  }

  export type PenaltyMaxAggregateOutputType = {
    id: number | null
    member_id: number | null
    contribution_id: number | null
    reason: string | null
    amount: Decimal | null
    applied_at: Date | null
    resolved_at: Date | null
  }

  export type PenaltyCountAggregateOutputType = {
    id: number
    member_id: number
    contribution_id: number
    reason: number
    amount: number
    applied_at: number
    resolved_at: number
    _all: number
  }


  export type PenaltyAvgAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
  }

  export type PenaltySumAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    amount?: true
  }

  export type PenaltyMinAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    reason?: true
    amount?: true
    applied_at?: true
    resolved_at?: true
  }

  export type PenaltyMaxAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    reason?: true
    amount?: true
    applied_at?: true
    resolved_at?: true
  }

  export type PenaltyCountAggregateInputType = {
    id?: true
    member_id?: true
    contribution_id?: true
    reason?: true
    amount?: true
    applied_at?: true
    resolved_at?: true
    _all?: true
  }

  export type PenaltyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Penalty to aggregate.
     */
    where?: PenaltyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Penalties to fetch.
     */
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PenaltyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Penalties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Penalties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Penalties
    **/
    _count?: true | PenaltyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PenaltyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PenaltySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PenaltyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PenaltyMaxAggregateInputType
  }

  export type GetPenaltyAggregateType<T extends PenaltyAggregateArgs> = {
        [P in keyof T & keyof AggregatePenalty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePenalty[P]>
      : GetScalarType<T[P], AggregatePenalty[P]>
  }




  export type PenaltyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PenaltyWhereInput
    orderBy?: PenaltyOrderByWithAggregationInput | PenaltyOrderByWithAggregationInput[]
    by: PenaltyScalarFieldEnum[] | PenaltyScalarFieldEnum
    having?: PenaltyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PenaltyCountAggregateInputType | true
    _avg?: PenaltyAvgAggregateInputType
    _sum?: PenaltySumAggregateInputType
    _min?: PenaltyMinAggregateInputType
    _max?: PenaltyMaxAggregateInputType
  }

  export type PenaltyGroupByOutputType = {
    id: number
    member_id: number
    contribution_id: number
    reason: string
    amount: Decimal
    applied_at: Date
    resolved_at: Date | null
    _count: PenaltyCountAggregateOutputType | null
    _avg: PenaltyAvgAggregateOutputType | null
    _sum: PenaltySumAggregateOutputType | null
    _min: PenaltyMinAggregateOutputType | null
    _max: PenaltyMaxAggregateOutputType | null
  }

  type GetPenaltyGroupByPayload<T extends PenaltyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PenaltyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PenaltyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PenaltyGroupByOutputType[P]>
            : GetScalarType<T[P], PenaltyGroupByOutputType[P]>
        }
      >
    >


  export type PenaltySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    reason?: boolean
    amount?: boolean
    applied_at?: boolean
    resolved_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    missed_months?: boolean | Penalty$missed_monthsArgs<ExtArgs>
    _count?: boolean | PenaltyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penalty"]>

  export type PenaltySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    reason?: boolean
    amount?: boolean
    applied_at?: boolean
    resolved_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penalty"]>

  export type PenaltySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    reason?: boolean
    amount?: boolean
    applied_at?: boolean
    resolved_at?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penalty"]>

  export type PenaltySelectScalar = {
    id?: boolean
    member_id?: boolean
    contribution_id?: boolean
    reason?: boolean
    amount?: boolean
    applied_at?: boolean
    resolved_at?: boolean
  }

  export type PenaltyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "member_id" | "contribution_id" | "reason" | "amount" | "applied_at" | "resolved_at", ExtArgs["result"]["penalty"]>
  export type PenaltyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
    missed_months?: boolean | Penalty$missed_monthsArgs<ExtArgs>
    _count?: boolean | PenaltyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PenaltyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }
  export type PenaltyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    contribution?: boolean | ContributionDefaultArgs<ExtArgs>
  }

  export type $PenaltyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Penalty"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      contribution: Prisma.$ContributionPayload<ExtArgs>
      missed_months: Prisma.$MissedMonthPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      member_id: number
      contribution_id: number
      reason: string
      amount: Prisma.Decimal
      applied_at: Date
      resolved_at: Date | null
    }, ExtArgs["result"]["penalty"]>
    composites: {}
  }

  type PenaltyGetPayload<S extends boolean | null | undefined | PenaltyDefaultArgs> = $Result.GetResult<Prisma.$PenaltyPayload, S>

  type PenaltyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PenaltyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PenaltyCountAggregateInputType | true
    }

  export interface PenaltyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Penalty'], meta: { name: 'Penalty' } }
    /**
     * Find zero or one Penalty that matches the filter.
     * @param {PenaltyFindUniqueArgs} args - Arguments to find a Penalty
     * @example
     * // Get one Penalty
     * const penalty = await prisma.penalty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PenaltyFindUniqueArgs>(args: SelectSubset<T, PenaltyFindUniqueArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Penalty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PenaltyFindUniqueOrThrowArgs} args - Arguments to find a Penalty
     * @example
     * // Get one Penalty
     * const penalty = await prisma.penalty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PenaltyFindUniqueOrThrowArgs>(args: SelectSubset<T, PenaltyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Penalty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyFindFirstArgs} args - Arguments to find a Penalty
     * @example
     * // Get one Penalty
     * const penalty = await prisma.penalty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PenaltyFindFirstArgs>(args?: SelectSubset<T, PenaltyFindFirstArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Penalty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyFindFirstOrThrowArgs} args - Arguments to find a Penalty
     * @example
     * // Get one Penalty
     * const penalty = await prisma.penalty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PenaltyFindFirstOrThrowArgs>(args?: SelectSubset<T, PenaltyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Penalties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Penalties
     * const penalties = await prisma.penalty.findMany()
     * 
     * // Get first 10 Penalties
     * const penalties = await prisma.penalty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const penaltyWithIdOnly = await prisma.penalty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PenaltyFindManyArgs>(args?: SelectSubset<T, PenaltyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Penalty.
     * @param {PenaltyCreateArgs} args - Arguments to create a Penalty.
     * @example
     * // Create one Penalty
     * const Penalty = await prisma.penalty.create({
     *   data: {
     *     // ... data to create a Penalty
     *   }
     * })
     * 
     */
    create<T extends PenaltyCreateArgs>(args: SelectSubset<T, PenaltyCreateArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Penalties.
     * @param {PenaltyCreateManyArgs} args - Arguments to create many Penalties.
     * @example
     * // Create many Penalties
     * const penalty = await prisma.penalty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PenaltyCreateManyArgs>(args?: SelectSubset<T, PenaltyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Penalties and returns the data saved in the database.
     * @param {PenaltyCreateManyAndReturnArgs} args - Arguments to create many Penalties.
     * @example
     * // Create many Penalties
     * const penalty = await prisma.penalty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Penalties and only return the `id`
     * const penaltyWithIdOnly = await prisma.penalty.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PenaltyCreateManyAndReturnArgs>(args?: SelectSubset<T, PenaltyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Penalty.
     * @param {PenaltyDeleteArgs} args - Arguments to delete one Penalty.
     * @example
     * // Delete one Penalty
     * const Penalty = await prisma.penalty.delete({
     *   where: {
     *     // ... filter to delete one Penalty
     *   }
     * })
     * 
     */
    delete<T extends PenaltyDeleteArgs>(args: SelectSubset<T, PenaltyDeleteArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Penalty.
     * @param {PenaltyUpdateArgs} args - Arguments to update one Penalty.
     * @example
     * // Update one Penalty
     * const penalty = await prisma.penalty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PenaltyUpdateArgs>(args: SelectSubset<T, PenaltyUpdateArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Penalties.
     * @param {PenaltyDeleteManyArgs} args - Arguments to filter Penalties to delete.
     * @example
     * // Delete a few Penalties
     * const { count } = await prisma.penalty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PenaltyDeleteManyArgs>(args?: SelectSubset<T, PenaltyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Penalties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Penalties
     * const penalty = await prisma.penalty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PenaltyUpdateManyArgs>(args: SelectSubset<T, PenaltyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Penalties and returns the data updated in the database.
     * @param {PenaltyUpdateManyAndReturnArgs} args - Arguments to update many Penalties.
     * @example
     * // Update many Penalties
     * const penalty = await prisma.penalty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Penalties and only return the `id`
     * const penaltyWithIdOnly = await prisma.penalty.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PenaltyUpdateManyAndReturnArgs>(args: SelectSubset<T, PenaltyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Penalty.
     * @param {PenaltyUpsertArgs} args - Arguments to update or create a Penalty.
     * @example
     * // Update or create a Penalty
     * const penalty = await prisma.penalty.upsert({
     *   create: {
     *     // ... data to create a Penalty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Penalty we want to update
     *   }
     * })
     */
    upsert<T extends PenaltyUpsertArgs>(args: SelectSubset<T, PenaltyUpsertArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Penalties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyCountArgs} args - Arguments to filter Penalties to count.
     * @example
     * // Count the number of Penalties
     * const count = await prisma.penalty.count({
     *   where: {
     *     // ... the filter for the Penalties we want to count
     *   }
     * })
    **/
    count<T extends PenaltyCountArgs>(
      args?: Subset<T, PenaltyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PenaltyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Penalty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PenaltyAggregateArgs>(args: Subset<T, PenaltyAggregateArgs>): Prisma.PrismaPromise<GetPenaltyAggregateType<T>>

    /**
     * Group by Penalty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PenaltyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PenaltyGroupByArgs['orderBy'] }
        : { orderBy?: PenaltyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PenaltyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPenaltyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Penalty model
   */
  readonly fields: PenaltyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Penalty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PenaltyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contribution<T extends ContributionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContributionDefaultArgs<ExtArgs>>): Prisma__ContributionClient<$Result.GetResult<Prisma.$ContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    missed_months<T extends Penalty$missed_monthsArgs<ExtArgs> = {}>(args?: Subset<T, Penalty$missed_monthsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Penalty model
   */
  interface PenaltyFieldRefs {
    readonly id: FieldRef<"Penalty", 'Int'>
    readonly member_id: FieldRef<"Penalty", 'Int'>
    readonly contribution_id: FieldRef<"Penalty", 'Int'>
    readonly reason: FieldRef<"Penalty", 'String'>
    readonly amount: FieldRef<"Penalty", 'Decimal'>
    readonly applied_at: FieldRef<"Penalty", 'DateTime'>
    readonly resolved_at: FieldRef<"Penalty", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Penalty findUnique
   */
  export type PenaltyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter, which Penalty to fetch.
     */
    where: PenaltyWhereUniqueInput
  }

  /**
   * Penalty findUniqueOrThrow
   */
  export type PenaltyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter, which Penalty to fetch.
     */
    where: PenaltyWhereUniqueInput
  }

  /**
   * Penalty findFirst
   */
  export type PenaltyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter, which Penalty to fetch.
     */
    where?: PenaltyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Penalties to fetch.
     */
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Penalties.
     */
    cursor?: PenaltyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Penalties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Penalties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Penalties.
     */
    distinct?: PenaltyScalarFieldEnum | PenaltyScalarFieldEnum[]
  }

  /**
   * Penalty findFirstOrThrow
   */
  export type PenaltyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter, which Penalty to fetch.
     */
    where?: PenaltyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Penalties to fetch.
     */
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Penalties.
     */
    cursor?: PenaltyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Penalties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Penalties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Penalties.
     */
    distinct?: PenaltyScalarFieldEnum | PenaltyScalarFieldEnum[]
  }

  /**
   * Penalty findMany
   */
  export type PenaltyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter, which Penalties to fetch.
     */
    where?: PenaltyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Penalties to fetch.
     */
    orderBy?: PenaltyOrderByWithRelationInput | PenaltyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Penalties.
     */
    cursor?: PenaltyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Penalties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Penalties.
     */
    skip?: number
    distinct?: PenaltyScalarFieldEnum | PenaltyScalarFieldEnum[]
  }

  /**
   * Penalty create
   */
  export type PenaltyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * The data needed to create a Penalty.
     */
    data: XOR<PenaltyCreateInput, PenaltyUncheckedCreateInput>
  }

  /**
   * Penalty createMany
   */
  export type PenaltyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Penalties.
     */
    data: PenaltyCreateManyInput | PenaltyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Penalty createManyAndReturn
   */
  export type PenaltyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * The data used to create many Penalties.
     */
    data: PenaltyCreateManyInput | PenaltyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Penalty update
   */
  export type PenaltyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * The data needed to update a Penalty.
     */
    data: XOR<PenaltyUpdateInput, PenaltyUncheckedUpdateInput>
    /**
     * Choose, which Penalty to update.
     */
    where: PenaltyWhereUniqueInput
  }

  /**
   * Penalty updateMany
   */
  export type PenaltyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Penalties.
     */
    data: XOR<PenaltyUpdateManyMutationInput, PenaltyUncheckedUpdateManyInput>
    /**
     * Filter which Penalties to update
     */
    where?: PenaltyWhereInput
    /**
     * Limit how many Penalties to update.
     */
    limit?: number
  }

  /**
   * Penalty updateManyAndReturn
   */
  export type PenaltyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * The data used to update Penalties.
     */
    data: XOR<PenaltyUpdateManyMutationInput, PenaltyUncheckedUpdateManyInput>
    /**
     * Filter which Penalties to update
     */
    where?: PenaltyWhereInput
    /**
     * Limit how many Penalties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Penalty upsert
   */
  export type PenaltyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * The filter to search for the Penalty to update in case it exists.
     */
    where: PenaltyWhereUniqueInput
    /**
     * In case the Penalty found by the `where` argument doesn't exist, create a new Penalty with this data.
     */
    create: XOR<PenaltyCreateInput, PenaltyUncheckedCreateInput>
    /**
     * In case the Penalty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PenaltyUpdateInput, PenaltyUncheckedUpdateInput>
  }

  /**
   * Penalty delete
   */
  export type PenaltyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
    /**
     * Filter which Penalty to delete.
     */
    where: PenaltyWhereUniqueInput
  }

  /**
   * Penalty deleteMany
   */
  export type PenaltyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Penalties to delete
     */
    where?: PenaltyWhereInput
    /**
     * Limit how many Penalties to delete.
     */
    limit?: number
  }

  /**
   * Penalty.missed_months
   */
  export type Penalty$missed_monthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    where?: MissedMonthWhereInput
    orderBy?: MissedMonthOrderByWithRelationInput | MissedMonthOrderByWithRelationInput[]
    cursor?: MissedMonthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MissedMonthScalarFieldEnum | MissedMonthScalarFieldEnum[]
  }

  /**
   * Penalty without action
   */
  export type PenaltyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Penalty
     */
    select?: PenaltySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Penalty
     */
    omit?: PenaltyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyInclude<ExtArgs> | null
  }


  /**
   * Model MissedMonth
   */

  export type AggregateMissedMonth = {
    _count: MissedMonthCountAggregateOutputType | null
    _avg: MissedMonthAvgAggregateOutputType | null
    _sum: MissedMonthSumAggregateOutputType | null
    _min: MissedMonthMinAggregateOutputType | null
    _max: MissedMonthMaxAggregateOutputType | null
  }

  export type MissedMonthAvgAggregateOutputType = {
    id: number | null
    penalty_id: number | null
  }

  export type MissedMonthSumAggregateOutputType = {
    id: number | null
    penalty_id: number | null
  }

  export type MissedMonthMinAggregateOutputType = {
    id: number | null
    penalty_id: number | null
    month: string | null
  }

  export type MissedMonthMaxAggregateOutputType = {
    id: number | null
    penalty_id: number | null
    month: string | null
  }

  export type MissedMonthCountAggregateOutputType = {
    id: number
    penalty_id: number
    month: number
    _all: number
  }


  export type MissedMonthAvgAggregateInputType = {
    id?: true
    penalty_id?: true
  }

  export type MissedMonthSumAggregateInputType = {
    id?: true
    penalty_id?: true
  }

  export type MissedMonthMinAggregateInputType = {
    id?: true
    penalty_id?: true
    month?: true
  }

  export type MissedMonthMaxAggregateInputType = {
    id?: true
    penalty_id?: true
    month?: true
  }

  export type MissedMonthCountAggregateInputType = {
    id?: true
    penalty_id?: true
    month?: true
    _all?: true
  }

  export type MissedMonthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissedMonth to aggregate.
     */
    where?: MissedMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissedMonths to fetch.
     */
    orderBy?: MissedMonthOrderByWithRelationInput | MissedMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissedMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissedMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissedMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MissedMonths
    **/
    _count?: true | MissedMonthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MissedMonthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MissedMonthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissedMonthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissedMonthMaxAggregateInputType
  }

  export type GetMissedMonthAggregateType<T extends MissedMonthAggregateArgs> = {
        [P in keyof T & keyof AggregateMissedMonth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMissedMonth[P]>
      : GetScalarType<T[P], AggregateMissedMonth[P]>
  }




  export type MissedMonthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissedMonthWhereInput
    orderBy?: MissedMonthOrderByWithAggregationInput | MissedMonthOrderByWithAggregationInput[]
    by: MissedMonthScalarFieldEnum[] | MissedMonthScalarFieldEnum
    having?: MissedMonthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissedMonthCountAggregateInputType | true
    _avg?: MissedMonthAvgAggregateInputType
    _sum?: MissedMonthSumAggregateInputType
    _min?: MissedMonthMinAggregateInputType
    _max?: MissedMonthMaxAggregateInputType
  }

  export type MissedMonthGroupByOutputType = {
    id: number
    penalty_id: number
    month: string
    _count: MissedMonthCountAggregateOutputType | null
    _avg: MissedMonthAvgAggregateOutputType | null
    _sum: MissedMonthSumAggregateOutputType | null
    _min: MissedMonthMinAggregateOutputType | null
    _max: MissedMonthMaxAggregateOutputType | null
  }

  type GetMissedMonthGroupByPayload<T extends MissedMonthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissedMonthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissedMonthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissedMonthGroupByOutputType[P]>
            : GetScalarType<T[P], MissedMonthGroupByOutputType[P]>
        }
      >
    >


  export type MissedMonthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    penalty_id?: boolean
    month?: boolean
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["missedMonth"]>

  export type MissedMonthSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    penalty_id?: boolean
    month?: boolean
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["missedMonth"]>

  export type MissedMonthSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    penalty_id?: boolean
    month?: boolean
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["missedMonth"]>

  export type MissedMonthSelectScalar = {
    id?: boolean
    penalty_id?: boolean
    month?: boolean
  }

  export type MissedMonthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "penalty_id" | "month", ExtArgs["result"]["missedMonth"]>
  export type MissedMonthInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }
  export type MissedMonthIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }
  export type MissedMonthIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    penalty?: boolean | PenaltyDefaultArgs<ExtArgs>
  }

  export type $MissedMonthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MissedMonth"
    objects: {
      penalty: Prisma.$PenaltyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      penalty_id: number
      month: string
    }, ExtArgs["result"]["missedMonth"]>
    composites: {}
  }

  type MissedMonthGetPayload<S extends boolean | null | undefined | MissedMonthDefaultArgs> = $Result.GetResult<Prisma.$MissedMonthPayload, S>

  type MissedMonthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MissedMonthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MissedMonthCountAggregateInputType | true
    }

  export interface MissedMonthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MissedMonth'], meta: { name: 'MissedMonth' } }
    /**
     * Find zero or one MissedMonth that matches the filter.
     * @param {MissedMonthFindUniqueArgs} args - Arguments to find a MissedMonth
     * @example
     * // Get one MissedMonth
     * const missedMonth = await prisma.missedMonth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MissedMonthFindUniqueArgs>(args: SelectSubset<T, MissedMonthFindUniqueArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MissedMonth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MissedMonthFindUniqueOrThrowArgs} args - Arguments to find a MissedMonth
     * @example
     * // Get one MissedMonth
     * const missedMonth = await prisma.missedMonth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MissedMonthFindUniqueOrThrowArgs>(args: SelectSubset<T, MissedMonthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MissedMonth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthFindFirstArgs} args - Arguments to find a MissedMonth
     * @example
     * // Get one MissedMonth
     * const missedMonth = await prisma.missedMonth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MissedMonthFindFirstArgs>(args?: SelectSubset<T, MissedMonthFindFirstArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MissedMonth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthFindFirstOrThrowArgs} args - Arguments to find a MissedMonth
     * @example
     * // Get one MissedMonth
     * const missedMonth = await prisma.missedMonth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MissedMonthFindFirstOrThrowArgs>(args?: SelectSubset<T, MissedMonthFindFirstOrThrowArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MissedMonths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MissedMonths
     * const missedMonths = await prisma.missedMonth.findMany()
     * 
     * // Get first 10 MissedMonths
     * const missedMonths = await prisma.missedMonth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missedMonthWithIdOnly = await prisma.missedMonth.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MissedMonthFindManyArgs>(args?: SelectSubset<T, MissedMonthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MissedMonth.
     * @param {MissedMonthCreateArgs} args - Arguments to create a MissedMonth.
     * @example
     * // Create one MissedMonth
     * const MissedMonth = await prisma.missedMonth.create({
     *   data: {
     *     // ... data to create a MissedMonth
     *   }
     * })
     * 
     */
    create<T extends MissedMonthCreateArgs>(args: SelectSubset<T, MissedMonthCreateArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MissedMonths.
     * @param {MissedMonthCreateManyArgs} args - Arguments to create many MissedMonths.
     * @example
     * // Create many MissedMonths
     * const missedMonth = await prisma.missedMonth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MissedMonthCreateManyArgs>(args?: SelectSubset<T, MissedMonthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MissedMonths and returns the data saved in the database.
     * @param {MissedMonthCreateManyAndReturnArgs} args - Arguments to create many MissedMonths.
     * @example
     * // Create many MissedMonths
     * const missedMonth = await prisma.missedMonth.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MissedMonths and only return the `id`
     * const missedMonthWithIdOnly = await prisma.missedMonth.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MissedMonthCreateManyAndReturnArgs>(args?: SelectSubset<T, MissedMonthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MissedMonth.
     * @param {MissedMonthDeleteArgs} args - Arguments to delete one MissedMonth.
     * @example
     * // Delete one MissedMonth
     * const MissedMonth = await prisma.missedMonth.delete({
     *   where: {
     *     // ... filter to delete one MissedMonth
     *   }
     * })
     * 
     */
    delete<T extends MissedMonthDeleteArgs>(args: SelectSubset<T, MissedMonthDeleteArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MissedMonth.
     * @param {MissedMonthUpdateArgs} args - Arguments to update one MissedMonth.
     * @example
     * // Update one MissedMonth
     * const missedMonth = await prisma.missedMonth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MissedMonthUpdateArgs>(args: SelectSubset<T, MissedMonthUpdateArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MissedMonths.
     * @param {MissedMonthDeleteManyArgs} args - Arguments to filter MissedMonths to delete.
     * @example
     * // Delete a few MissedMonths
     * const { count } = await prisma.missedMonth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MissedMonthDeleteManyArgs>(args?: SelectSubset<T, MissedMonthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MissedMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MissedMonths
     * const missedMonth = await prisma.missedMonth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MissedMonthUpdateManyArgs>(args: SelectSubset<T, MissedMonthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MissedMonths and returns the data updated in the database.
     * @param {MissedMonthUpdateManyAndReturnArgs} args - Arguments to update many MissedMonths.
     * @example
     * // Update many MissedMonths
     * const missedMonth = await prisma.missedMonth.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MissedMonths and only return the `id`
     * const missedMonthWithIdOnly = await prisma.missedMonth.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MissedMonthUpdateManyAndReturnArgs>(args: SelectSubset<T, MissedMonthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MissedMonth.
     * @param {MissedMonthUpsertArgs} args - Arguments to update or create a MissedMonth.
     * @example
     * // Update or create a MissedMonth
     * const missedMonth = await prisma.missedMonth.upsert({
     *   create: {
     *     // ... data to create a MissedMonth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MissedMonth we want to update
     *   }
     * })
     */
    upsert<T extends MissedMonthUpsertArgs>(args: SelectSubset<T, MissedMonthUpsertArgs<ExtArgs>>): Prisma__MissedMonthClient<$Result.GetResult<Prisma.$MissedMonthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MissedMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthCountArgs} args - Arguments to filter MissedMonths to count.
     * @example
     * // Count the number of MissedMonths
     * const count = await prisma.missedMonth.count({
     *   where: {
     *     // ... the filter for the MissedMonths we want to count
     *   }
     * })
    **/
    count<T extends MissedMonthCountArgs>(
      args?: Subset<T, MissedMonthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissedMonthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MissedMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissedMonthAggregateArgs>(args: Subset<T, MissedMonthAggregateArgs>): Prisma.PrismaPromise<GetMissedMonthAggregateType<T>>

    /**
     * Group by MissedMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissedMonthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissedMonthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissedMonthGroupByArgs['orderBy'] }
        : { orderBy?: MissedMonthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissedMonthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissedMonthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MissedMonth model
   */
  readonly fields: MissedMonthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MissedMonth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissedMonthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    penalty<T extends PenaltyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PenaltyDefaultArgs<ExtArgs>>): Prisma__PenaltyClient<$Result.GetResult<Prisma.$PenaltyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MissedMonth model
   */
  interface MissedMonthFieldRefs {
    readonly id: FieldRef<"MissedMonth", 'Int'>
    readonly penalty_id: FieldRef<"MissedMonth", 'Int'>
    readonly month: FieldRef<"MissedMonth", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MissedMonth findUnique
   */
  export type MissedMonthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter, which MissedMonth to fetch.
     */
    where: MissedMonthWhereUniqueInput
  }

  /**
   * MissedMonth findUniqueOrThrow
   */
  export type MissedMonthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter, which MissedMonth to fetch.
     */
    where: MissedMonthWhereUniqueInput
  }

  /**
   * MissedMonth findFirst
   */
  export type MissedMonthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter, which MissedMonth to fetch.
     */
    where?: MissedMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissedMonths to fetch.
     */
    orderBy?: MissedMonthOrderByWithRelationInput | MissedMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissedMonths.
     */
    cursor?: MissedMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissedMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissedMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissedMonths.
     */
    distinct?: MissedMonthScalarFieldEnum | MissedMonthScalarFieldEnum[]
  }

  /**
   * MissedMonth findFirstOrThrow
   */
  export type MissedMonthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter, which MissedMonth to fetch.
     */
    where?: MissedMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissedMonths to fetch.
     */
    orderBy?: MissedMonthOrderByWithRelationInput | MissedMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissedMonths.
     */
    cursor?: MissedMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissedMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissedMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissedMonths.
     */
    distinct?: MissedMonthScalarFieldEnum | MissedMonthScalarFieldEnum[]
  }

  /**
   * MissedMonth findMany
   */
  export type MissedMonthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter, which MissedMonths to fetch.
     */
    where?: MissedMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissedMonths to fetch.
     */
    orderBy?: MissedMonthOrderByWithRelationInput | MissedMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MissedMonths.
     */
    cursor?: MissedMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissedMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissedMonths.
     */
    skip?: number
    distinct?: MissedMonthScalarFieldEnum | MissedMonthScalarFieldEnum[]
  }

  /**
   * MissedMonth create
   */
  export type MissedMonthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * The data needed to create a MissedMonth.
     */
    data: XOR<MissedMonthCreateInput, MissedMonthUncheckedCreateInput>
  }

  /**
   * MissedMonth createMany
   */
  export type MissedMonthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MissedMonths.
     */
    data: MissedMonthCreateManyInput | MissedMonthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MissedMonth createManyAndReturn
   */
  export type MissedMonthCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * The data used to create many MissedMonths.
     */
    data: MissedMonthCreateManyInput | MissedMonthCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MissedMonth update
   */
  export type MissedMonthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * The data needed to update a MissedMonth.
     */
    data: XOR<MissedMonthUpdateInput, MissedMonthUncheckedUpdateInput>
    /**
     * Choose, which MissedMonth to update.
     */
    where: MissedMonthWhereUniqueInput
  }

  /**
   * MissedMonth updateMany
   */
  export type MissedMonthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MissedMonths.
     */
    data: XOR<MissedMonthUpdateManyMutationInput, MissedMonthUncheckedUpdateManyInput>
    /**
     * Filter which MissedMonths to update
     */
    where?: MissedMonthWhereInput
    /**
     * Limit how many MissedMonths to update.
     */
    limit?: number
  }

  /**
   * MissedMonth updateManyAndReturn
   */
  export type MissedMonthUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * The data used to update MissedMonths.
     */
    data: XOR<MissedMonthUpdateManyMutationInput, MissedMonthUncheckedUpdateManyInput>
    /**
     * Filter which MissedMonths to update
     */
    where?: MissedMonthWhereInput
    /**
     * Limit how many MissedMonths to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MissedMonth upsert
   */
  export type MissedMonthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * The filter to search for the MissedMonth to update in case it exists.
     */
    where: MissedMonthWhereUniqueInput
    /**
     * In case the MissedMonth found by the `where` argument doesn't exist, create a new MissedMonth with this data.
     */
    create: XOR<MissedMonthCreateInput, MissedMonthUncheckedCreateInput>
    /**
     * In case the MissedMonth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissedMonthUpdateInput, MissedMonthUncheckedUpdateInput>
  }

  /**
   * MissedMonth delete
   */
  export type MissedMonthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
    /**
     * Filter which MissedMonth to delete.
     */
    where: MissedMonthWhereUniqueInput
  }

  /**
   * MissedMonth deleteMany
   */
  export type MissedMonthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissedMonths to delete
     */
    where?: MissedMonthWhereInput
    /**
     * Limit how many MissedMonths to delete.
     */
    limit?: number
  }

  /**
   * MissedMonth without action
   */
  export type MissedMonthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissedMonth
     */
    select?: MissedMonthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MissedMonth
     */
    omit?: MissedMonthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissedMonthInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MemberScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    second_name: 'second_name',
    last_name: 'last_name',
    profession: 'profession',
    title: 'title',
    job_business: 'job_business',
    id_number: 'id_number',
    birth_date: 'birth_date',
    citizen: 'citizen',
    joined_date: 'joined_date',
    end_date: 'end_date',
    wereda: 'wereda',
    zone_or_district: 'zone_or_district',
    kebele: 'kebele',
    sex: 'sex',
    phone_number: 'phone_number',
    member_type: 'member_type',
    document: 'document',
    remark: 'remark',
    status: 'status'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const RelativeScalarFieldEnum: {
    id: 'id',
    member_id: 'member_id',
    first_name: 'first_name',
    second_name: 'second_name',
    last_name: 'last_name',
    relation_type: 'relation_type',
    status: 'status'
  };

  export type RelativeScalarFieldEnum = (typeof RelativeScalarFieldEnum)[keyof typeof RelativeScalarFieldEnum]


  export const ContributionScalarFieldEnum: {
    id: 'id',
    member_id: 'member_id',
    contribution_type_id: 'contribution_type_id',
    random: 'random',
    type_name: 'type_name',
    amount: 'amount',
    start_date: 'start_date',
    end_date: 'end_date'
  };

  export type ContributionScalarFieldEnum = (typeof ContributionScalarFieldEnum)[keyof typeof ContributionScalarFieldEnum]


  export const ContributionTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    amount: 'amount',
    is_active: 'is_active',
    is_for_all: 'is_for_all',
    created_at: 'created_at',
    start_date: 'start_date',
    end_date: 'end_date'
  };

  export type ContributionTypeScalarFieldEnum = (typeof ContributionTypeScalarFieldEnum)[keyof typeof ContributionTypeScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    contribution_id: 'contribution_id',
    member_id: 'member_id',
    payment_date: 'payment_date',
    payment_month: 'payment_month',
    paid_amount: 'paid_amount',
    payment_method: 'payment_method',
    document: 'document',
    created_at: 'created_at'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const BalanceScalarFieldEnum: {
    id: 'id',
    member_id: 'member_id',
    contribution_id: 'contribution_id',
    amount: 'amount',
    updated_at: 'updated_at'
  };

  export type BalanceScalarFieldEnum = (typeof BalanceScalarFieldEnum)[keyof typeof BalanceScalarFieldEnum]


  export const PenaltyScalarFieldEnum: {
    id: 'id',
    member_id: 'member_id',
    contribution_id: 'contribution_id',
    reason: 'reason',
    amount: 'amount',
    applied_at: 'applied_at',
    resolved_at: 'resolved_at'
  };

  export type PenaltyScalarFieldEnum = (typeof PenaltyScalarFieldEnum)[keyof typeof PenaltyScalarFieldEnum]


  export const MissedMonthScalarFieldEnum: {
    id: 'id',
    penalty_id: 'penalty_id',
    month: 'month'
  };

  export type MissedMonthScalarFieldEnum = (typeof MissedMonthScalarFieldEnum)[keyof typeof MissedMonthScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'MemberType'
   */
  export type EnumMemberTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberType'>
    


  /**
   * Reference to a field of type 'MemberType[]'
   */
  export type ListEnumMemberTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberType[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'RelativeStatus'
   */
  export type EnumRelativeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelativeStatus'>
    


  /**
   * Reference to a field of type 'RelativeStatus[]'
   */
  export type ListEnumRelativeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelativeStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: IntFilter<"Member"> | number
    first_name?: StringFilter<"Member"> | string
    second_name?: StringFilter<"Member"> | string
    last_name?: StringFilter<"Member"> | string
    profession?: StringNullableFilter<"Member"> | string | null
    title?: StringNullableFilter<"Member"> | string | null
    job_business?: StringNullableFilter<"Member"> | string | null
    id_number?: StringNullableFilter<"Member"> | string | null
    birth_date?: DateTimeFilter<"Member"> | Date | string
    citizen?: StringFilter<"Member"> | string
    joined_date?: DateTimeFilter<"Member"> | Date | string
    end_date?: DateTimeNullableFilter<"Member"> | Date | string | null
    wereda?: StringNullableFilter<"Member"> | string | null
    zone_or_district?: StringNullableFilter<"Member"> | string | null
    kebele?: StringNullableFilter<"Member"> | string | null
    sex?: EnumSexFilter<"Member"> | $Enums.Sex
    phone_number?: StringFilter<"Member"> | string
    member_type?: EnumMemberTypeFilter<"Member"> | $Enums.MemberType
    document?: StringNullableFilter<"Member"> | string | null
    remark?: StringNullableFilter<"Member"> | string | null
    status?: EnumStatusFilter<"Member"> | $Enums.Status
    relative?: RelativeListRelationFilter
    Payment?: PaymentListRelationFilter
    Balance?: BalanceListRelationFilter
    Penalty?: PenaltyListRelationFilter
    Contribution?: ContributionListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    profession?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    job_business?: SortOrderInput | SortOrder
    id_number?: SortOrderInput | SortOrder
    birth_date?: SortOrder
    citizen?: SortOrder
    joined_date?: SortOrder
    end_date?: SortOrderInput | SortOrder
    wereda?: SortOrderInput | SortOrder
    zone_or_district?: SortOrderInput | SortOrder
    kebele?: SortOrderInput | SortOrder
    sex?: SortOrder
    phone_number?: SortOrder
    member_type?: SortOrder
    document?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    status?: SortOrder
    relative?: RelativeOrderByRelationAggregateInput
    Payment?: PaymentOrderByRelationAggregateInput
    Balance?: BalanceOrderByRelationAggregateInput
    Penalty?: PenaltyOrderByRelationAggregateInput
    Contribution?: ContributionOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_number?: string
    phone_number?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    first_name?: StringFilter<"Member"> | string
    second_name?: StringFilter<"Member"> | string
    last_name?: StringFilter<"Member"> | string
    profession?: StringNullableFilter<"Member"> | string | null
    title?: StringNullableFilter<"Member"> | string | null
    job_business?: StringNullableFilter<"Member"> | string | null
    birth_date?: DateTimeFilter<"Member"> | Date | string
    citizen?: StringFilter<"Member"> | string
    joined_date?: DateTimeFilter<"Member"> | Date | string
    end_date?: DateTimeNullableFilter<"Member"> | Date | string | null
    wereda?: StringNullableFilter<"Member"> | string | null
    zone_or_district?: StringNullableFilter<"Member"> | string | null
    kebele?: StringNullableFilter<"Member"> | string | null
    sex?: EnumSexFilter<"Member"> | $Enums.Sex
    member_type?: EnumMemberTypeFilter<"Member"> | $Enums.MemberType
    document?: StringNullableFilter<"Member"> | string | null
    remark?: StringNullableFilter<"Member"> | string | null
    status?: EnumStatusFilter<"Member"> | $Enums.Status
    relative?: RelativeListRelationFilter
    Payment?: PaymentListRelationFilter
    Balance?: BalanceListRelationFilter
    Penalty?: PenaltyListRelationFilter
    Contribution?: ContributionListRelationFilter
  }, "id" | "id_number" | "phone_number">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    profession?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    job_business?: SortOrderInput | SortOrder
    id_number?: SortOrderInput | SortOrder
    birth_date?: SortOrder
    citizen?: SortOrder
    joined_date?: SortOrder
    end_date?: SortOrderInput | SortOrder
    wereda?: SortOrderInput | SortOrder
    zone_or_district?: SortOrderInput | SortOrder
    kebele?: SortOrderInput | SortOrder
    sex?: SortOrder
    phone_number?: SortOrder
    member_type?: SortOrder
    document?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _avg?: MemberAvgOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
    _sum?: MemberSumOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Member"> | number
    first_name?: StringWithAggregatesFilter<"Member"> | string
    second_name?: StringWithAggregatesFilter<"Member"> | string
    last_name?: StringWithAggregatesFilter<"Member"> | string
    profession?: StringNullableWithAggregatesFilter<"Member"> | string | null
    title?: StringNullableWithAggregatesFilter<"Member"> | string | null
    job_business?: StringNullableWithAggregatesFilter<"Member"> | string | null
    id_number?: StringNullableWithAggregatesFilter<"Member"> | string | null
    birth_date?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    citizen?: StringWithAggregatesFilter<"Member"> | string
    joined_date?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    end_date?: DateTimeNullableWithAggregatesFilter<"Member"> | Date | string | null
    wereda?: StringNullableWithAggregatesFilter<"Member"> | string | null
    zone_or_district?: StringNullableWithAggregatesFilter<"Member"> | string | null
    kebele?: StringNullableWithAggregatesFilter<"Member"> | string | null
    sex?: EnumSexWithAggregatesFilter<"Member"> | $Enums.Sex
    phone_number?: StringWithAggregatesFilter<"Member"> | string
    member_type?: EnumMemberTypeWithAggregatesFilter<"Member"> | $Enums.MemberType
    document?: StringNullableWithAggregatesFilter<"Member"> | string | null
    remark?: StringNullableWithAggregatesFilter<"Member"> | string | null
    status?: EnumStatusWithAggregatesFilter<"Member"> | $Enums.Status
  }

  export type RelativeWhereInput = {
    AND?: RelativeWhereInput | RelativeWhereInput[]
    OR?: RelativeWhereInput[]
    NOT?: RelativeWhereInput | RelativeWhereInput[]
    id?: IntFilter<"Relative"> | number
    member_id?: IntFilter<"Relative"> | number
    first_name?: StringFilter<"Relative"> | string
    second_name?: StringFilter<"Relative"> | string
    last_name?: StringFilter<"Relative"> | string
    relation_type?: StringFilter<"Relative"> | string
    status?: EnumRelativeStatusFilter<"Relative"> | $Enums.RelativeStatus
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type RelativeOrderByWithRelationInput = {
    id?: SortOrder
    member_id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    relation_type?: SortOrder
    status?: SortOrder
    member?: MemberOrderByWithRelationInput
  }

  export type RelativeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RelativeWhereInput | RelativeWhereInput[]
    OR?: RelativeWhereInput[]
    NOT?: RelativeWhereInput | RelativeWhereInput[]
    member_id?: IntFilter<"Relative"> | number
    first_name?: StringFilter<"Relative"> | string
    second_name?: StringFilter<"Relative"> | string
    last_name?: StringFilter<"Relative"> | string
    relation_type?: StringFilter<"Relative"> | string
    status?: EnumRelativeStatusFilter<"Relative"> | $Enums.RelativeStatus
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type RelativeOrderByWithAggregationInput = {
    id?: SortOrder
    member_id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    relation_type?: SortOrder
    status?: SortOrder
    _count?: RelativeCountOrderByAggregateInput
    _avg?: RelativeAvgOrderByAggregateInput
    _max?: RelativeMaxOrderByAggregateInput
    _min?: RelativeMinOrderByAggregateInput
    _sum?: RelativeSumOrderByAggregateInput
  }

  export type RelativeScalarWhereWithAggregatesInput = {
    AND?: RelativeScalarWhereWithAggregatesInput | RelativeScalarWhereWithAggregatesInput[]
    OR?: RelativeScalarWhereWithAggregatesInput[]
    NOT?: RelativeScalarWhereWithAggregatesInput | RelativeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Relative"> | number
    member_id?: IntWithAggregatesFilter<"Relative"> | number
    first_name?: StringWithAggregatesFilter<"Relative"> | string
    second_name?: StringWithAggregatesFilter<"Relative"> | string
    last_name?: StringWithAggregatesFilter<"Relative"> | string
    relation_type?: StringWithAggregatesFilter<"Relative"> | string
    status?: EnumRelativeStatusWithAggregatesFilter<"Relative"> | $Enums.RelativeStatus
  }

  export type ContributionWhereInput = {
    AND?: ContributionWhereInput | ContributionWhereInput[]
    OR?: ContributionWhereInput[]
    NOT?: ContributionWhereInput | ContributionWhereInput[]
    id?: IntFilter<"Contribution"> | number
    member_id?: IntFilter<"Contribution"> | number
    contribution_type_id?: IntFilter<"Contribution"> | number
    random?: IntFilter<"Contribution"> | number
    type_name?: StringFilter<"Contribution"> | string
    amount?: DecimalFilter<"Contribution"> | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFilter<"Contribution"> | Date | string
    end_date?: DateTimeFilter<"Contribution"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contributionType?: XOR<ContributionTypeScalarRelationFilter, ContributionTypeWhereInput>
    payment?: PaymentListRelationFilter
    Balance?: BalanceListRelationFilter
    Penalty?: PenaltyListRelationFilter
  }

  export type ContributionOrderByWithRelationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    type_name?: SortOrder
    amount?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    member?: MemberOrderByWithRelationInput
    contributionType?: ContributionTypeOrderByWithRelationInput
    payment?: PaymentOrderByRelationAggregateInput
    Balance?: BalanceOrderByRelationAggregateInput
    Penalty?: PenaltyOrderByRelationAggregateInput
  }

  export type ContributionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContributionWhereInput | ContributionWhereInput[]
    OR?: ContributionWhereInput[]
    NOT?: ContributionWhereInput | ContributionWhereInput[]
    member_id?: IntFilter<"Contribution"> | number
    contribution_type_id?: IntFilter<"Contribution"> | number
    random?: IntFilter<"Contribution"> | number
    type_name?: StringFilter<"Contribution"> | string
    amount?: DecimalFilter<"Contribution"> | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFilter<"Contribution"> | Date | string
    end_date?: DateTimeFilter<"Contribution"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contributionType?: XOR<ContributionTypeScalarRelationFilter, ContributionTypeWhereInput>
    payment?: PaymentListRelationFilter
    Balance?: BalanceListRelationFilter
    Penalty?: PenaltyListRelationFilter
  }, "id">

  export type ContributionOrderByWithAggregationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    type_name?: SortOrder
    amount?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    _count?: ContributionCountOrderByAggregateInput
    _avg?: ContributionAvgOrderByAggregateInput
    _max?: ContributionMaxOrderByAggregateInput
    _min?: ContributionMinOrderByAggregateInput
    _sum?: ContributionSumOrderByAggregateInput
  }

  export type ContributionScalarWhereWithAggregatesInput = {
    AND?: ContributionScalarWhereWithAggregatesInput | ContributionScalarWhereWithAggregatesInput[]
    OR?: ContributionScalarWhereWithAggregatesInput[]
    NOT?: ContributionScalarWhereWithAggregatesInput | ContributionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contribution"> | number
    member_id?: IntWithAggregatesFilter<"Contribution"> | number
    contribution_type_id?: IntWithAggregatesFilter<"Contribution"> | number
    random?: IntWithAggregatesFilter<"Contribution"> | number
    type_name?: StringWithAggregatesFilter<"Contribution"> | string
    amount?: DecimalWithAggregatesFilter<"Contribution"> | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeWithAggregatesFilter<"Contribution"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Contribution"> | Date | string
  }

  export type ContributionTypeWhereInput = {
    AND?: ContributionTypeWhereInput | ContributionTypeWhereInput[]
    OR?: ContributionTypeWhereInput[]
    NOT?: ContributionTypeWhereInput | ContributionTypeWhereInput[]
    id?: IntFilter<"ContributionType"> | number
    name?: StringFilter<"ContributionType"> | string
    amount?: DecimalFilter<"ContributionType"> | Decimal | DecimalJsLike | number | string
    is_active?: BoolFilter<"ContributionType"> | boolean
    is_for_all?: BoolFilter<"ContributionType"> | boolean
    created_at?: DateTimeFilter<"ContributionType"> | Date | string
    start_date?: DateTimeNullableFilter<"ContributionType"> | Date | string | null
    end_date?: DateTimeNullableFilter<"ContributionType"> | Date | string | null
    contributions?: ContributionListRelationFilter
  }

  export type ContributionTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    is_active?: SortOrder
    is_for_all?: SortOrder
    created_at?: SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    contributions?: ContributionOrderByRelationAggregateInput
  }

  export type ContributionTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ContributionTypeWhereInput | ContributionTypeWhereInput[]
    OR?: ContributionTypeWhereInput[]
    NOT?: ContributionTypeWhereInput | ContributionTypeWhereInput[]
    amount?: DecimalFilter<"ContributionType"> | Decimal | DecimalJsLike | number | string
    is_active?: BoolFilter<"ContributionType"> | boolean
    is_for_all?: BoolFilter<"ContributionType"> | boolean
    created_at?: DateTimeFilter<"ContributionType"> | Date | string
    start_date?: DateTimeNullableFilter<"ContributionType"> | Date | string | null
    end_date?: DateTimeNullableFilter<"ContributionType"> | Date | string | null
    contributions?: ContributionListRelationFilter
  }, "id" | "name">

  export type ContributionTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    is_active?: SortOrder
    is_for_all?: SortOrder
    created_at?: SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    _count?: ContributionTypeCountOrderByAggregateInput
    _avg?: ContributionTypeAvgOrderByAggregateInput
    _max?: ContributionTypeMaxOrderByAggregateInput
    _min?: ContributionTypeMinOrderByAggregateInput
    _sum?: ContributionTypeSumOrderByAggregateInput
  }

  export type ContributionTypeScalarWhereWithAggregatesInput = {
    AND?: ContributionTypeScalarWhereWithAggregatesInput | ContributionTypeScalarWhereWithAggregatesInput[]
    OR?: ContributionTypeScalarWhereWithAggregatesInput[]
    NOT?: ContributionTypeScalarWhereWithAggregatesInput | ContributionTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContributionType"> | number
    name?: StringWithAggregatesFilter<"ContributionType"> | string
    amount?: DecimalWithAggregatesFilter<"ContributionType"> | Decimal | DecimalJsLike | number | string
    is_active?: BoolWithAggregatesFilter<"ContributionType"> | boolean
    is_for_all?: BoolWithAggregatesFilter<"ContributionType"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"ContributionType"> | Date | string
    start_date?: DateTimeNullableWithAggregatesFilter<"ContributionType"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"ContributionType"> | Date | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    contribution_id?: IntFilter<"Payment"> | number
    member_id?: IntFilter<"Payment"> | number
    payment_date?: DateTimeFilter<"Payment"> | Date | string
    payment_month?: StringFilter<"Payment"> | string
    paid_amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringFilter<"Payment"> | string
    document?: StringFilter<"Payment"> | string
    created_at?: DateTimeFilter<"Payment"> | Date | string
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    payment_date?: SortOrder
    payment_month?: SortOrder
    paid_amount?: SortOrder
    payment_method?: SortOrder
    document?: SortOrder
    created_at?: SortOrder
    contribution?: ContributionOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    contribution_id?: IntFilter<"Payment"> | number
    member_id?: IntFilter<"Payment"> | number
    payment_date?: DateTimeFilter<"Payment"> | Date | string
    payment_month?: StringFilter<"Payment"> | string
    paid_amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringFilter<"Payment"> | string
    document?: StringFilter<"Payment"> | string
    created_at?: DateTimeFilter<"Payment"> | Date | string
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    payment_date?: SortOrder
    payment_month?: SortOrder
    paid_amount?: SortOrder
    payment_method?: SortOrder
    document?: SortOrder
    created_at?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    contribution_id?: IntWithAggregatesFilter<"Payment"> | number
    member_id?: IntWithAggregatesFilter<"Payment"> | number
    payment_date?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    payment_month?: StringWithAggregatesFilter<"Payment"> | string
    paid_amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringWithAggregatesFilter<"Payment"> | string
    document?: StringWithAggregatesFilter<"Payment"> | string
    created_at?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type BalanceWhereInput = {
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    id?: IntFilter<"Balance"> | number
    member_id?: IntFilter<"Balance"> | number
    contribution_id?: IntFilter<"Balance"> | number
    amount?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"Balance"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
  }

  export type BalanceOrderByWithRelationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
    updated_at?: SortOrder
    member?: MemberOrderByWithRelationInput
    contribution?: ContributionOrderByWithRelationInput
  }

  export type BalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    member_id_contribution_id?: BalanceMember_idContribution_idCompoundUniqueInput
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    member_id?: IntFilter<"Balance"> | number
    contribution_id?: IntFilter<"Balance"> | number
    amount?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"Balance"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
  }, "id" | "member_id_contribution_id">

  export type BalanceOrderByWithAggregationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
    updated_at?: SortOrder
    _count?: BalanceCountOrderByAggregateInput
    _avg?: BalanceAvgOrderByAggregateInput
    _max?: BalanceMaxOrderByAggregateInput
    _min?: BalanceMinOrderByAggregateInput
    _sum?: BalanceSumOrderByAggregateInput
  }

  export type BalanceScalarWhereWithAggregatesInput = {
    AND?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    OR?: BalanceScalarWhereWithAggregatesInput[]
    NOT?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Balance"> | number
    member_id?: IntWithAggregatesFilter<"Balance"> | number
    contribution_id?: IntWithAggregatesFilter<"Balance"> | number
    amount?: DecimalWithAggregatesFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeWithAggregatesFilter<"Balance"> | Date | string
  }

  export type PenaltyWhereInput = {
    AND?: PenaltyWhereInput | PenaltyWhereInput[]
    OR?: PenaltyWhereInput[]
    NOT?: PenaltyWhereInput | PenaltyWhereInput[]
    id?: IntFilter<"Penalty"> | number
    member_id?: IntFilter<"Penalty"> | number
    contribution_id?: IntFilter<"Penalty"> | number
    reason?: StringFilter<"Penalty"> | string
    amount?: DecimalFilter<"Penalty"> | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFilter<"Penalty"> | Date | string
    resolved_at?: DateTimeNullableFilter<"Penalty"> | Date | string | null
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
    missed_months?: MissedMonthListRelationFilter
  }

  export type PenaltyOrderByWithRelationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    reason?: SortOrder
    amount?: SortOrder
    applied_at?: SortOrder
    resolved_at?: SortOrderInput | SortOrder
    member?: MemberOrderByWithRelationInput
    contribution?: ContributionOrderByWithRelationInput
    missed_months?: MissedMonthOrderByRelationAggregateInput
  }

  export type PenaltyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PenaltyWhereInput | PenaltyWhereInput[]
    OR?: PenaltyWhereInput[]
    NOT?: PenaltyWhereInput | PenaltyWhereInput[]
    member_id?: IntFilter<"Penalty"> | number
    contribution_id?: IntFilter<"Penalty"> | number
    reason?: StringFilter<"Penalty"> | string
    amount?: DecimalFilter<"Penalty"> | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFilter<"Penalty"> | Date | string
    resolved_at?: DateTimeNullableFilter<"Penalty"> | Date | string | null
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    contribution?: XOR<ContributionScalarRelationFilter, ContributionWhereInput>
    missed_months?: MissedMonthListRelationFilter
  }, "id">

  export type PenaltyOrderByWithAggregationInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    reason?: SortOrder
    amount?: SortOrder
    applied_at?: SortOrder
    resolved_at?: SortOrderInput | SortOrder
    _count?: PenaltyCountOrderByAggregateInput
    _avg?: PenaltyAvgOrderByAggregateInput
    _max?: PenaltyMaxOrderByAggregateInput
    _min?: PenaltyMinOrderByAggregateInput
    _sum?: PenaltySumOrderByAggregateInput
  }

  export type PenaltyScalarWhereWithAggregatesInput = {
    AND?: PenaltyScalarWhereWithAggregatesInput | PenaltyScalarWhereWithAggregatesInput[]
    OR?: PenaltyScalarWhereWithAggregatesInput[]
    NOT?: PenaltyScalarWhereWithAggregatesInput | PenaltyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Penalty"> | number
    member_id?: IntWithAggregatesFilter<"Penalty"> | number
    contribution_id?: IntWithAggregatesFilter<"Penalty"> | number
    reason?: StringWithAggregatesFilter<"Penalty"> | string
    amount?: DecimalWithAggregatesFilter<"Penalty"> | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeWithAggregatesFilter<"Penalty"> | Date | string
    resolved_at?: DateTimeNullableWithAggregatesFilter<"Penalty"> | Date | string | null
  }

  export type MissedMonthWhereInput = {
    AND?: MissedMonthWhereInput | MissedMonthWhereInput[]
    OR?: MissedMonthWhereInput[]
    NOT?: MissedMonthWhereInput | MissedMonthWhereInput[]
    id?: IntFilter<"MissedMonth"> | number
    penalty_id?: IntFilter<"MissedMonth"> | number
    month?: StringFilter<"MissedMonth"> | string
    penalty?: XOR<PenaltyScalarRelationFilter, PenaltyWhereInput>
  }

  export type MissedMonthOrderByWithRelationInput = {
    id?: SortOrder
    penalty_id?: SortOrder
    month?: SortOrder
    penalty?: PenaltyOrderByWithRelationInput
  }

  export type MissedMonthWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MissedMonthWhereInput | MissedMonthWhereInput[]
    OR?: MissedMonthWhereInput[]
    NOT?: MissedMonthWhereInput | MissedMonthWhereInput[]
    penalty_id?: IntFilter<"MissedMonth"> | number
    month?: StringFilter<"MissedMonth"> | string
    penalty?: XOR<PenaltyScalarRelationFilter, PenaltyWhereInput>
  }, "id">

  export type MissedMonthOrderByWithAggregationInput = {
    id?: SortOrder
    penalty_id?: SortOrder
    month?: SortOrder
    _count?: MissedMonthCountOrderByAggregateInput
    _avg?: MissedMonthAvgOrderByAggregateInput
    _max?: MissedMonthMaxOrderByAggregateInput
    _min?: MissedMonthMinOrderByAggregateInput
    _sum?: MissedMonthSumOrderByAggregateInput
  }

  export type MissedMonthScalarWhereWithAggregatesInput = {
    AND?: MissedMonthScalarWhereWithAggregatesInput | MissedMonthScalarWhereWithAggregatesInput[]
    OR?: MissedMonthScalarWhereWithAggregatesInput[]
    NOT?: MissedMonthScalarWhereWithAggregatesInput | MissedMonthScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MissedMonth"> | number
    penalty_id?: IntWithAggregatesFilter<"MissedMonth"> | number
    month?: StringWithAggregatesFilter<"MissedMonth"> | string
  }

  export type MemberCreateInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeCreateNestedManyWithoutMemberInput
    Payment?: PaymentCreateNestedManyWithoutMemberInput
    Balance?: BalanceCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyCreateNestedManyWithoutMemberInput
    Contribution?: ContributionCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeUncheckedCreateNestedManyWithoutMemberInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutMemberInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutMemberInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUncheckedUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateManyInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
  }

  export type MemberUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type RelativeCreateInput = {
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
    member: MemberCreateNestedOneWithoutRelativeInput
  }

  export type RelativeUncheckedCreateInput = {
    id?: number
    member_id: number
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
  }

  export type RelativeUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
    member?: MemberUpdateOneRequiredWithoutRelativeNestedInput
  }

  export type RelativeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type RelativeCreateManyInput = {
    id?: number
    member_id: number
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
  }

  export type RelativeUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type RelativeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type ContributionCreateInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    member: MemberCreateNestedOneWithoutContributionInput
    contributionType: ContributionTypeCreateNestedOneWithoutContributionsInput
    payment?: PaymentCreateNestedManyWithoutContributionInput
    Balance?: BalanceCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateInput = {
    id?: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    payment?: PaymentUncheckedCreateNestedManyWithoutContributionInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionUpdateInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutContributionNestedInput
    contributionType?: ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput
    payment?: PaymentUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type ContributionCreateManyInput = {
    id?: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
  }

  export type ContributionUpdateManyMutationInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContributionTypeCreateInput = {
    name: string
    amount: Decimal | DecimalJsLike | number | string
    is_active?: boolean
    is_for_all?: boolean
    created_at?: Date | string
    start_date?: Date | string | null
    end_date?: Date | string | null
    contributions?: ContributionCreateNestedManyWithoutContributionTypeInput
  }

  export type ContributionTypeUncheckedCreateInput = {
    id?: number
    name: string
    amount: Decimal | DecimalJsLike | number | string
    is_active?: boolean
    is_for_all?: boolean
    created_at?: Date | string
    start_date?: Date | string | null
    end_date?: Date | string | null
    contributions?: ContributionUncheckedCreateNestedManyWithoutContributionTypeInput
  }

  export type ContributionTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contributions?: ContributionUpdateManyWithoutContributionTypeNestedInput
  }

  export type ContributionTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contributions?: ContributionUncheckedUpdateManyWithoutContributionTypeNestedInput
  }

  export type ContributionTypeCreateManyInput = {
    id?: number
    name: string
    amount: Decimal | DecimalJsLike | number | string
    is_active?: boolean
    is_for_all?: boolean
    created_at?: Date | string
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type ContributionTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContributionTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateInput = {
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
    contribution: ContributionCreateNestedOneWithoutPaymentInput
    member: MemberCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    contribution_id: number
    member_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type PaymentUpdateInput = {
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    contribution?: ContributionUpdateOneRequiredWithoutPaymentNestedInput
    member?: MemberUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    contribution_id: number
    member_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateInput = {
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
    member: MemberCreateNestedOneWithoutBalanceInput
    contribution: ContributionCreateNestedOneWithoutBalanceInput
  }

  export type BalanceUncheckedCreateInput = {
    id?: number
    member_id: number
    contribution_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type BalanceUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutBalanceNestedInput
    contribution?: ContributionUpdateOneRequiredWithoutBalanceNestedInput
  }

  export type BalanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateManyInput = {
    id?: number
    member_id: number
    contribution_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type BalanceUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PenaltyCreateInput = {
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    member: MemberCreateNestedOneWithoutPenaltyInput
    contribution: ContributionCreateNestedOneWithoutPenaltyInput
    missed_months?: MissedMonthCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyUncheckedCreateInput = {
    id?: number
    member_id: number
    contribution_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    missed_months?: MissedMonthUncheckedCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    member?: MemberUpdateOneRequiredWithoutPenaltyNestedInput
    contribution?: ContributionUpdateOneRequiredWithoutPenaltyNestedInput
    missed_months?: MissedMonthUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    missed_months?: MissedMonthUncheckedUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyCreateManyInput = {
    id?: number
    member_id: number
    contribution_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
  }

  export type PenaltyUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PenaltyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MissedMonthCreateInput = {
    month: string
    penalty: PenaltyCreateNestedOneWithoutMissed_monthsInput
  }

  export type MissedMonthUncheckedCreateInput = {
    id?: number
    penalty_id: number
    month: string
  }

  export type MissedMonthUpdateInput = {
    month?: StringFieldUpdateOperationsInput | string
    penalty?: PenaltyUpdateOneRequiredWithoutMissed_monthsNestedInput
  }

  export type MissedMonthUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    penalty_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
  }

  export type MissedMonthCreateManyInput = {
    id?: number
    penalty_id: number
    month: string
  }

  export type MissedMonthUpdateManyMutationInput = {
    month?: StringFieldUpdateOperationsInput | string
  }

  export type MissedMonthUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    penalty_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type EnumMemberTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberType | EnumMemberTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberTypeFilter<$PrismaModel> | $Enums.MemberType
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type RelativeListRelationFilter = {
    every?: RelativeWhereInput
    some?: RelativeWhereInput
    none?: RelativeWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type BalanceListRelationFilter = {
    every?: BalanceWhereInput
    some?: BalanceWhereInput
    none?: BalanceWhereInput
  }

  export type PenaltyListRelationFilter = {
    every?: PenaltyWhereInput
    some?: PenaltyWhereInput
    none?: PenaltyWhereInput
  }

  export type ContributionListRelationFilter = {
    every?: ContributionWhereInput
    some?: ContributionWhereInput
    none?: ContributionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RelativeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BalanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PenaltyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContributionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    profession?: SortOrder
    title?: SortOrder
    job_business?: SortOrder
    id_number?: SortOrder
    birth_date?: SortOrder
    citizen?: SortOrder
    joined_date?: SortOrder
    end_date?: SortOrder
    wereda?: SortOrder
    zone_or_district?: SortOrder
    kebele?: SortOrder
    sex?: SortOrder
    phone_number?: SortOrder
    member_type?: SortOrder
    document?: SortOrder
    remark?: SortOrder
    status?: SortOrder
  }

  export type MemberAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    profession?: SortOrder
    title?: SortOrder
    job_business?: SortOrder
    id_number?: SortOrder
    birth_date?: SortOrder
    citizen?: SortOrder
    joined_date?: SortOrder
    end_date?: SortOrder
    wereda?: SortOrder
    zone_or_district?: SortOrder
    kebele?: SortOrder
    sex?: SortOrder
    phone_number?: SortOrder
    member_type?: SortOrder
    document?: SortOrder
    remark?: SortOrder
    status?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    profession?: SortOrder
    title?: SortOrder
    job_business?: SortOrder
    id_number?: SortOrder
    birth_date?: SortOrder
    citizen?: SortOrder
    joined_date?: SortOrder
    end_date?: SortOrder
    wereda?: SortOrder
    zone_or_district?: SortOrder
    kebele?: SortOrder
    sex?: SortOrder
    phone_number?: SortOrder
    member_type?: SortOrder
    document?: SortOrder
    remark?: SortOrder
    status?: SortOrder
  }

  export type MemberSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type EnumMemberTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberType | EnumMemberTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberTypeWithAggregatesFilter<$PrismaModel> | $Enums.MemberType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberTypeFilter<$PrismaModel>
    _max?: NestedEnumMemberTypeFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumRelativeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RelativeStatus | EnumRelativeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelativeStatusFilter<$PrismaModel> | $Enums.RelativeStatus
  }

  export type MemberScalarRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type RelativeCountOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    relation_type?: SortOrder
    status?: SortOrder
  }

  export type RelativeAvgOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
  }

  export type RelativeMaxOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    relation_type?: SortOrder
    status?: SortOrder
  }

  export type RelativeMinOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    first_name?: SortOrder
    second_name?: SortOrder
    last_name?: SortOrder
    relation_type?: SortOrder
    status?: SortOrder
  }

  export type RelativeSumOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
  }

  export type EnumRelativeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelativeStatus | EnumRelativeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelativeStatusWithAggregatesFilter<$PrismaModel> | $Enums.RelativeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelativeStatusFilter<$PrismaModel>
    _max?: NestedEnumRelativeStatusFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ContributionTypeScalarRelationFilter = {
    is?: ContributionTypeWhereInput
    isNot?: ContributionTypeWhereInput
  }

  export type ContributionCountOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    type_name?: SortOrder
    amount?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionAvgOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    amount?: SortOrder
  }

  export type ContributionMaxOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    type_name?: SortOrder
    amount?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionMinOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    type_name?: SortOrder
    amount?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionSumOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_type_id?: SortOrder
    random?: SortOrder
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ContributionTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    is_active?: SortOrder
    is_for_all?: SortOrder
    created_at?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type ContributionTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    is_active?: SortOrder
    is_for_all?: SortOrder
    created_at?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    is_active?: SortOrder
    is_for_all?: SortOrder
    created_at?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type ContributionTypeSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ContributionScalarRelationFilter = {
    is?: ContributionWhereInput
    isNot?: ContributionWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    payment_date?: SortOrder
    payment_month?: SortOrder
    paid_amount?: SortOrder
    payment_method?: SortOrder
    document?: SortOrder
    created_at?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    paid_amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    payment_date?: SortOrder
    payment_month?: SortOrder
    paid_amount?: SortOrder
    payment_method?: SortOrder
    document?: SortOrder
    created_at?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    payment_date?: SortOrder
    payment_month?: SortOrder
    paid_amount?: SortOrder
    payment_method?: SortOrder
    document?: SortOrder
    created_at?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    contribution_id?: SortOrder
    member_id?: SortOrder
    paid_amount?: SortOrder
  }

  export type BalanceMember_idContribution_idCompoundUniqueInput = {
    member_id: number
    contribution_id: number
  }

  export type BalanceCountOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceAvgOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
  }

  export type BalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceMinOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceSumOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
  }

  export type MissedMonthListRelationFilter = {
    every?: MissedMonthWhereInput
    some?: MissedMonthWhereInput
    none?: MissedMonthWhereInput
  }

  export type MissedMonthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PenaltyCountOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    reason?: SortOrder
    amount?: SortOrder
    applied_at?: SortOrder
    resolved_at?: SortOrder
  }

  export type PenaltyAvgOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
  }

  export type PenaltyMaxOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    reason?: SortOrder
    amount?: SortOrder
    applied_at?: SortOrder
    resolved_at?: SortOrder
  }

  export type PenaltyMinOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    reason?: SortOrder
    amount?: SortOrder
    applied_at?: SortOrder
    resolved_at?: SortOrder
  }

  export type PenaltySumOrderByAggregateInput = {
    id?: SortOrder
    member_id?: SortOrder
    contribution_id?: SortOrder
    amount?: SortOrder
  }

  export type PenaltyScalarRelationFilter = {
    is?: PenaltyWhereInput
    isNot?: PenaltyWhereInput
  }

  export type MissedMonthCountOrderByAggregateInput = {
    id?: SortOrder
    penalty_id?: SortOrder
    month?: SortOrder
  }

  export type MissedMonthAvgOrderByAggregateInput = {
    id?: SortOrder
    penalty_id?: SortOrder
  }

  export type MissedMonthMaxOrderByAggregateInput = {
    id?: SortOrder
    penalty_id?: SortOrder
    month?: SortOrder
  }

  export type MissedMonthMinOrderByAggregateInput = {
    id?: SortOrder
    penalty_id?: SortOrder
    month?: SortOrder
  }

  export type MissedMonthSumOrderByAggregateInput = {
    id?: SortOrder
    penalty_id?: SortOrder
  }

  export type RelativeCreateNestedManyWithoutMemberInput = {
    create?: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput> | RelativeCreateWithoutMemberInput[] | RelativeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: RelativeCreateOrConnectWithoutMemberInput | RelativeCreateOrConnectWithoutMemberInput[]
    createMany?: RelativeCreateManyMemberInputEnvelope
    connect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutMemberInput = {
    create?: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput> | PaymentCreateWithoutMemberInput[] | PaymentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMemberInput | PaymentCreateOrConnectWithoutMemberInput[]
    createMany?: PaymentCreateManyMemberInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BalanceCreateNestedManyWithoutMemberInput = {
    create?: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput> | BalanceCreateWithoutMemberInput[] | BalanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutMemberInput | BalanceCreateOrConnectWithoutMemberInput[]
    createMany?: BalanceCreateManyMemberInputEnvelope
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
  }

  export type PenaltyCreateNestedManyWithoutMemberInput = {
    create?: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput> | PenaltyCreateWithoutMemberInput[] | PenaltyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutMemberInput | PenaltyCreateOrConnectWithoutMemberInput[]
    createMany?: PenaltyCreateManyMemberInputEnvelope
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
  }

  export type ContributionCreateNestedManyWithoutMemberInput = {
    create?: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput> | ContributionCreateWithoutMemberInput[] | ContributionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutMemberInput | ContributionCreateOrConnectWithoutMemberInput[]
    createMany?: ContributionCreateManyMemberInputEnvelope
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
  }

  export type RelativeUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput> | RelativeCreateWithoutMemberInput[] | RelativeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: RelativeCreateOrConnectWithoutMemberInput | RelativeCreateOrConnectWithoutMemberInput[]
    createMany?: RelativeCreateManyMemberInputEnvelope
    connect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput> | PaymentCreateWithoutMemberInput[] | PaymentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMemberInput | PaymentCreateOrConnectWithoutMemberInput[]
    createMany?: PaymentCreateManyMemberInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BalanceUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput> | BalanceCreateWithoutMemberInput[] | BalanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutMemberInput | BalanceCreateOrConnectWithoutMemberInput[]
    createMany?: BalanceCreateManyMemberInputEnvelope
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
  }

  export type PenaltyUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput> | PenaltyCreateWithoutMemberInput[] | PenaltyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutMemberInput | PenaltyCreateOrConnectWithoutMemberInput[]
    createMany?: PenaltyCreateManyMemberInputEnvelope
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
  }

  export type ContributionUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput> | ContributionCreateWithoutMemberInput[] | ContributionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutMemberInput | ContributionCreateOrConnectWithoutMemberInput[]
    createMany?: ContributionCreateManyMemberInputEnvelope
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex
  }

  export type EnumMemberTypeFieldUpdateOperationsInput = {
    set?: $Enums.MemberType
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type RelativeUpdateManyWithoutMemberNestedInput = {
    create?: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput> | RelativeCreateWithoutMemberInput[] | RelativeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: RelativeCreateOrConnectWithoutMemberInput | RelativeCreateOrConnectWithoutMemberInput[]
    upsert?: RelativeUpsertWithWhereUniqueWithoutMemberInput | RelativeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: RelativeCreateManyMemberInputEnvelope
    set?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    disconnect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    delete?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    connect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    update?: RelativeUpdateWithWhereUniqueWithoutMemberInput | RelativeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: RelativeUpdateManyWithWhereWithoutMemberInput | RelativeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: RelativeScalarWhereInput | RelativeScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput> | PaymentCreateWithoutMemberInput[] | PaymentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMemberInput | PaymentCreateOrConnectWithoutMemberInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutMemberInput | PaymentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PaymentCreateManyMemberInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutMemberInput | PaymentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutMemberInput | PaymentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BalanceUpdateManyWithoutMemberNestedInput = {
    create?: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput> | BalanceCreateWithoutMemberInput[] | BalanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutMemberInput | BalanceCreateOrConnectWithoutMemberInput[]
    upsert?: BalanceUpsertWithWhereUniqueWithoutMemberInput | BalanceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: BalanceCreateManyMemberInputEnvelope
    set?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    disconnect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    delete?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    update?: BalanceUpdateWithWhereUniqueWithoutMemberInput | BalanceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: BalanceUpdateManyWithWhereWithoutMemberInput | BalanceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
  }

  export type PenaltyUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput> | PenaltyCreateWithoutMemberInput[] | PenaltyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutMemberInput | PenaltyCreateOrConnectWithoutMemberInput[]
    upsert?: PenaltyUpsertWithWhereUniqueWithoutMemberInput | PenaltyUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PenaltyCreateManyMemberInputEnvelope
    set?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    disconnect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    delete?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    update?: PenaltyUpdateWithWhereUniqueWithoutMemberInput | PenaltyUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PenaltyUpdateManyWithWhereWithoutMemberInput | PenaltyUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
  }

  export type ContributionUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput> | ContributionCreateWithoutMemberInput[] | ContributionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutMemberInput | ContributionCreateOrConnectWithoutMemberInput[]
    upsert?: ContributionUpsertWithWhereUniqueWithoutMemberInput | ContributionUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ContributionCreateManyMemberInputEnvelope
    set?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    disconnect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    delete?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    update?: ContributionUpdateWithWhereUniqueWithoutMemberInput | ContributionUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ContributionUpdateManyWithWhereWithoutMemberInput | ContributionUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RelativeUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput> | RelativeCreateWithoutMemberInput[] | RelativeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: RelativeCreateOrConnectWithoutMemberInput | RelativeCreateOrConnectWithoutMemberInput[]
    upsert?: RelativeUpsertWithWhereUniqueWithoutMemberInput | RelativeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: RelativeCreateManyMemberInputEnvelope
    set?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    disconnect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    delete?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    connect?: RelativeWhereUniqueInput | RelativeWhereUniqueInput[]
    update?: RelativeUpdateWithWhereUniqueWithoutMemberInput | RelativeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: RelativeUpdateManyWithWhereWithoutMemberInput | RelativeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: RelativeScalarWhereInput | RelativeScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput> | PaymentCreateWithoutMemberInput[] | PaymentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMemberInput | PaymentCreateOrConnectWithoutMemberInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutMemberInput | PaymentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PaymentCreateManyMemberInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutMemberInput | PaymentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutMemberInput | PaymentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BalanceUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput> | BalanceCreateWithoutMemberInput[] | BalanceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutMemberInput | BalanceCreateOrConnectWithoutMemberInput[]
    upsert?: BalanceUpsertWithWhereUniqueWithoutMemberInput | BalanceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: BalanceCreateManyMemberInputEnvelope
    set?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    disconnect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    delete?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    update?: BalanceUpdateWithWhereUniqueWithoutMemberInput | BalanceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: BalanceUpdateManyWithWhereWithoutMemberInput | BalanceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
  }

  export type PenaltyUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput> | PenaltyCreateWithoutMemberInput[] | PenaltyUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutMemberInput | PenaltyCreateOrConnectWithoutMemberInput[]
    upsert?: PenaltyUpsertWithWhereUniqueWithoutMemberInput | PenaltyUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PenaltyCreateManyMemberInputEnvelope
    set?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    disconnect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    delete?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    update?: PenaltyUpdateWithWhereUniqueWithoutMemberInput | PenaltyUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PenaltyUpdateManyWithWhereWithoutMemberInput | PenaltyUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
  }

  export type ContributionUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput> | ContributionCreateWithoutMemberInput[] | ContributionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutMemberInput | ContributionCreateOrConnectWithoutMemberInput[]
    upsert?: ContributionUpsertWithWhereUniqueWithoutMemberInput | ContributionUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ContributionCreateManyMemberInputEnvelope
    set?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    disconnect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    delete?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    update?: ContributionUpdateWithWhereUniqueWithoutMemberInput | ContributionUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ContributionUpdateManyWithWhereWithoutMemberInput | ContributionUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutRelativeInput = {
    create?: XOR<MemberCreateWithoutRelativeInput, MemberUncheckedCreateWithoutRelativeInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRelativeInput
    connect?: MemberWhereUniqueInput
  }

  export type EnumRelativeStatusFieldUpdateOperationsInput = {
    set?: $Enums.RelativeStatus
  }

  export type MemberUpdateOneRequiredWithoutRelativeNestedInput = {
    create?: XOR<MemberCreateWithoutRelativeInput, MemberUncheckedCreateWithoutRelativeInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRelativeInput
    upsert?: MemberUpsertWithoutRelativeInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutRelativeInput, MemberUpdateWithoutRelativeInput>, MemberUncheckedUpdateWithoutRelativeInput>
  }

  export type MemberCreateNestedOneWithoutContributionInput = {
    create?: XOR<MemberCreateWithoutContributionInput, MemberUncheckedCreateWithoutContributionInput>
    connectOrCreate?: MemberCreateOrConnectWithoutContributionInput
    connect?: MemberWhereUniqueInput
  }

  export type ContributionTypeCreateNestedOneWithoutContributionsInput = {
    create?: XOR<ContributionTypeCreateWithoutContributionsInput, ContributionTypeUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: ContributionTypeCreateOrConnectWithoutContributionsInput
    connect?: ContributionTypeWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutContributionInput = {
    create?: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput> | PaymentCreateWithoutContributionInput[] | PaymentUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutContributionInput | PaymentCreateOrConnectWithoutContributionInput[]
    createMany?: PaymentCreateManyContributionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BalanceCreateNestedManyWithoutContributionInput = {
    create?: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput> | BalanceCreateWithoutContributionInput[] | BalanceUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutContributionInput | BalanceCreateOrConnectWithoutContributionInput[]
    createMany?: BalanceCreateManyContributionInputEnvelope
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
  }

  export type PenaltyCreateNestedManyWithoutContributionInput = {
    create?: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput> | PenaltyCreateWithoutContributionInput[] | PenaltyUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutContributionInput | PenaltyCreateOrConnectWithoutContributionInput[]
    createMany?: PenaltyCreateManyContributionInputEnvelope
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutContributionInput = {
    create?: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput> | PaymentCreateWithoutContributionInput[] | PaymentUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutContributionInput | PaymentCreateOrConnectWithoutContributionInput[]
    createMany?: PaymentCreateManyContributionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BalanceUncheckedCreateNestedManyWithoutContributionInput = {
    create?: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput> | BalanceCreateWithoutContributionInput[] | BalanceUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutContributionInput | BalanceCreateOrConnectWithoutContributionInput[]
    createMany?: BalanceCreateManyContributionInputEnvelope
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
  }

  export type PenaltyUncheckedCreateNestedManyWithoutContributionInput = {
    create?: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput> | PenaltyCreateWithoutContributionInput[] | PenaltyUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutContributionInput | PenaltyCreateOrConnectWithoutContributionInput[]
    createMany?: PenaltyCreateManyContributionInputEnvelope
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type MemberUpdateOneRequiredWithoutContributionNestedInput = {
    create?: XOR<MemberCreateWithoutContributionInput, MemberUncheckedCreateWithoutContributionInput>
    connectOrCreate?: MemberCreateOrConnectWithoutContributionInput
    upsert?: MemberUpsertWithoutContributionInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutContributionInput, MemberUpdateWithoutContributionInput>, MemberUncheckedUpdateWithoutContributionInput>
  }

  export type ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<ContributionTypeCreateWithoutContributionsInput, ContributionTypeUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: ContributionTypeCreateOrConnectWithoutContributionsInput
    upsert?: ContributionTypeUpsertWithoutContributionsInput
    connect?: ContributionTypeWhereUniqueInput
    update?: XOR<XOR<ContributionTypeUpdateToOneWithWhereWithoutContributionsInput, ContributionTypeUpdateWithoutContributionsInput>, ContributionTypeUncheckedUpdateWithoutContributionsInput>
  }

  export type PaymentUpdateManyWithoutContributionNestedInput = {
    create?: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput> | PaymentCreateWithoutContributionInput[] | PaymentUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutContributionInput | PaymentCreateOrConnectWithoutContributionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutContributionInput | PaymentUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: PaymentCreateManyContributionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutContributionInput | PaymentUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutContributionInput | PaymentUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BalanceUpdateManyWithoutContributionNestedInput = {
    create?: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput> | BalanceCreateWithoutContributionInput[] | BalanceUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutContributionInput | BalanceCreateOrConnectWithoutContributionInput[]
    upsert?: BalanceUpsertWithWhereUniqueWithoutContributionInput | BalanceUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: BalanceCreateManyContributionInputEnvelope
    set?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    disconnect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    delete?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    update?: BalanceUpdateWithWhereUniqueWithoutContributionInput | BalanceUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: BalanceUpdateManyWithWhereWithoutContributionInput | BalanceUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
  }

  export type PenaltyUpdateManyWithoutContributionNestedInput = {
    create?: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput> | PenaltyCreateWithoutContributionInput[] | PenaltyUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutContributionInput | PenaltyCreateOrConnectWithoutContributionInput[]
    upsert?: PenaltyUpsertWithWhereUniqueWithoutContributionInput | PenaltyUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: PenaltyCreateManyContributionInputEnvelope
    set?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    disconnect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    delete?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    update?: PenaltyUpdateWithWhereUniqueWithoutContributionInput | PenaltyUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: PenaltyUpdateManyWithWhereWithoutContributionInput | PenaltyUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutContributionNestedInput = {
    create?: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput> | PaymentCreateWithoutContributionInput[] | PaymentUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutContributionInput | PaymentCreateOrConnectWithoutContributionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutContributionInput | PaymentUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: PaymentCreateManyContributionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutContributionInput | PaymentUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutContributionInput | PaymentUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BalanceUncheckedUpdateManyWithoutContributionNestedInput = {
    create?: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput> | BalanceCreateWithoutContributionInput[] | BalanceUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: BalanceCreateOrConnectWithoutContributionInput | BalanceCreateOrConnectWithoutContributionInput[]
    upsert?: BalanceUpsertWithWhereUniqueWithoutContributionInput | BalanceUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: BalanceCreateManyContributionInputEnvelope
    set?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    disconnect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    delete?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    connect?: BalanceWhereUniqueInput | BalanceWhereUniqueInput[]
    update?: BalanceUpdateWithWhereUniqueWithoutContributionInput | BalanceUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: BalanceUpdateManyWithWhereWithoutContributionInput | BalanceUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
  }

  export type PenaltyUncheckedUpdateManyWithoutContributionNestedInput = {
    create?: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput> | PenaltyCreateWithoutContributionInput[] | PenaltyUncheckedCreateWithoutContributionInput[]
    connectOrCreate?: PenaltyCreateOrConnectWithoutContributionInput | PenaltyCreateOrConnectWithoutContributionInput[]
    upsert?: PenaltyUpsertWithWhereUniqueWithoutContributionInput | PenaltyUpsertWithWhereUniqueWithoutContributionInput[]
    createMany?: PenaltyCreateManyContributionInputEnvelope
    set?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    disconnect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    delete?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    connect?: PenaltyWhereUniqueInput | PenaltyWhereUniqueInput[]
    update?: PenaltyUpdateWithWhereUniqueWithoutContributionInput | PenaltyUpdateWithWhereUniqueWithoutContributionInput[]
    updateMany?: PenaltyUpdateManyWithWhereWithoutContributionInput | PenaltyUpdateManyWithWhereWithoutContributionInput[]
    deleteMany?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
  }

  export type ContributionCreateNestedManyWithoutContributionTypeInput = {
    create?: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput> | ContributionCreateWithoutContributionTypeInput[] | ContributionUncheckedCreateWithoutContributionTypeInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutContributionTypeInput | ContributionCreateOrConnectWithoutContributionTypeInput[]
    createMany?: ContributionCreateManyContributionTypeInputEnvelope
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
  }

  export type ContributionUncheckedCreateNestedManyWithoutContributionTypeInput = {
    create?: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput> | ContributionCreateWithoutContributionTypeInput[] | ContributionUncheckedCreateWithoutContributionTypeInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutContributionTypeInput | ContributionCreateOrConnectWithoutContributionTypeInput[]
    createMany?: ContributionCreateManyContributionTypeInputEnvelope
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ContributionUpdateManyWithoutContributionTypeNestedInput = {
    create?: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput> | ContributionCreateWithoutContributionTypeInput[] | ContributionUncheckedCreateWithoutContributionTypeInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutContributionTypeInput | ContributionCreateOrConnectWithoutContributionTypeInput[]
    upsert?: ContributionUpsertWithWhereUniqueWithoutContributionTypeInput | ContributionUpsertWithWhereUniqueWithoutContributionTypeInput[]
    createMany?: ContributionCreateManyContributionTypeInputEnvelope
    set?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    disconnect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    delete?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    update?: ContributionUpdateWithWhereUniqueWithoutContributionTypeInput | ContributionUpdateWithWhereUniqueWithoutContributionTypeInput[]
    updateMany?: ContributionUpdateManyWithWhereWithoutContributionTypeInput | ContributionUpdateManyWithWhereWithoutContributionTypeInput[]
    deleteMany?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
  }

  export type ContributionUncheckedUpdateManyWithoutContributionTypeNestedInput = {
    create?: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput> | ContributionCreateWithoutContributionTypeInput[] | ContributionUncheckedCreateWithoutContributionTypeInput[]
    connectOrCreate?: ContributionCreateOrConnectWithoutContributionTypeInput | ContributionCreateOrConnectWithoutContributionTypeInput[]
    upsert?: ContributionUpsertWithWhereUniqueWithoutContributionTypeInput | ContributionUpsertWithWhereUniqueWithoutContributionTypeInput[]
    createMany?: ContributionCreateManyContributionTypeInputEnvelope
    set?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    disconnect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    delete?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    connect?: ContributionWhereUniqueInput | ContributionWhereUniqueInput[]
    update?: ContributionUpdateWithWhereUniqueWithoutContributionTypeInput | ContributionUpdateWithWhereUniqueWithoutContributionTypeInput[]
    updateMany?: ContributionUpdateManyWithWhereWithoutContributionTypeInput | ContributionUpdateManyWithWhereWithoutContributionTypeInput[]
    deleteMany?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
  }

  export type ContributionCreateNestedOneWithoutPaymentInput = {
    create?: XOR<ContributionCreateWithoutPaymentInput, ContributionUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutPaymentInput
    connect?: ContributionWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutPaymentInput = {
    create?: XOR<MemberCreateWithoutPaymentInput, MemberUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPaymentInput
    connect?: MemberWhereUniqueInput
  }

  export type ContributionUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<ContributionCreateWithoutPaymentInput, ContributionUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutPaymentInput
    upsert?: ContributionUpsertWithoutPaymentInput
    connect?: ContributionWhereUniqueInput
    update?: XOR<XOR<ContributionUpdateToOneWithWhereWithoutPaymentInput, ContributionUpdateWithoutPaymentInput>, ContributionUncheckedUpdateWithoutPaymentInput>
  }

  export type MemberUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<MemberCreateWithoutPaymentInput, MemberUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPaymentInput
    upsert?: MemberUpsertWithoutPaymentInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPaymentInput, MemberUpdateWithoutPaymentInput>, MemberUncheckedUpdateWithoutPaymentInput>
  }

  export type MemberCreateNestedOneWithoutBalanceInput = {
    create?: XOR<MemberCreateWithoutBalanceInput, MemberUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBalanceInput
    connect?: MemberWhereUniqueInput
  }

  export type ContributionCreateNestedOneWithoutBalanceInput = {
    create?: XOR<ContributionCreateWithoutBalanceInput, ContributionUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutBalanceInput
    connect?: ContributionWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutBalanceNestedInput = {
    create?: XOR<MemberCreateWithoutBalanceInput, MemberUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBalanceInput
    upsert?: MemberUpsertWithoutBalanceInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutBalanceInput, MemberUpdateWithoutBalanceInput>, MemberUncheckedUpdateWithoutBalanceInput>
  }

  export type ContributionUpdateOneRequiredWithoutBalanceNestedInput = {
    create?: XOR<ContributionCreateWithoutBalanceInput, ContributionUncheckedCreateWithoutBalanceInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutBalanceInput
    upsert?: ContributionUpsertWithoutBalanceInput
    connect?: ContributionWhereUniqueInput
    update?: XOR<XOR<ContributionUpdateToOneWithWhereWithoutBalanceInput, ContributionUpdateWithoutBalanceInput>, ContributionUncheckedUpdateWithoutBalanceInput>
  }

  export type MemberCreateNestedOneWithoutPenaltyInput = {
    create?: XOR<MemberCreateWithoutPenaltyInput, MemberUncheckedCreateWithoutPenaltyInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPenaltyInput
    connect?: MemberWhereUniqueInput
  }

  export type ContributionCreateNestedOneWithoutPenaltyInput = {
    create?: XOR<ContributionCreateWithoutPenaltyInput, ContributionUncheckedCreateWithoutPenaltyInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutPenaltyInput
    connect?: ContributionWhereUniqueInput
  }

  export type MissedMonthCreateNestedManyWithoutPenaltyInput = {
    create?: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput> | MissedMonthCreateWithoutPenaltyInput[] | MissedMonthUncheckedCreateWithoutPenaltyInput[]
    connectOrCreate?: MissedMonthCreateOrConnectWithoutPenaltyInput | MissedMonthCreateOrConnectWithoutPenaltyInput[]
    createMany?: MissedMonthCreateManyPenaltyInputEnvelope
    connect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
  }

  export type MissedMonthUncheckedCreateNestedManyWithoutPenaltyInput = {
    create?: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput> | MissedMonthCreateWithoutPenaltyInput[] | MissedMonthUncheckedCreateWithoutPenaltyInput[]
    connectOrCreate?: MissedMonthCreateOrConnectWithoutPenaltyInput | MissedMonthCreateOrConnectWithoutPenaltyInput[]
    createMany?: MissedMonthCreateManyPenaltyInputEnvelope
    connect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
  }

  export type MemberUpdateOneRequiredWithoutPenaltyNestedInput = {
    create?: XOR<MemberCreateWithoutPenaltyInput, MemberUncheckedCreateWithoutPenaltyInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPenaltyInput
    upsert?: MemberUpsertWithoutPenaltyInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPenaltyInput, MemberUpdateWithoutPenaltyInput>, MemberUncheckedUpdateWithoutPenaltyInput>
  }

  export type ContributionUpdateOneRequiredWithoutPenaltyNestedInput = {
    create?: XOR<ContributionCreateWithoutPenaltyInput, ContributionUncheckedCreateWithoutPenaltyInput>
    connectOrCreate?: ContributionCreateOrConnectWithoutPenaltyInput
    upsert?: ContributionUpsertWithoutPenaltyInput
    connect?: ContributionWhereUniqueInput
    update?: XOR<XOR<ContributionUpdateToOneWithWhereWithoutPenaltyInput, ContributionUpdateWithoutPenaltyInput>, ContributionUncheckedUpdateWithoutPenaltyInput>
  }

  export type MissedMonthUpdateManyWithoutPenaltyNestedInput = {
    create?: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput> | MissedMonthCreateWithoutPenaltyInput[] | MissedMonthUncheckedCreateWithoutPenaltyInput[]
    connectOrCreate?: MissedMonthCreateOrConnectWithoutPenaltyInput | MissedMonthCreateOrConnectWithoutPenaltyInput[]
    upsert?: MissedMonthUpsertWithWhereUniqueWithoutPenaltyInput | MissedMonthUpsertWithWhereUniqueWithoutPenaltyInput[]
    createMany?: MissedMonthCreateManyPenaltyInputEnvelope
    set?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    disconnect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    delete?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    connect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    update?: MissedMonthUpdateWithWhereUniqueWithoutPenaltyInput | MissedMonthUpdateWithWhereUniqueWithoutPenaltyInput[]
    updateMany?: MissedMonthUpdateManyWithWhereWithoutPenaltyInput | MissedMonthUpdateManyWithWhereWithoutPenaltyInput[]
    deleteMany?: MissedMonthScalarWhereInput | MissedMonthScalarWhereInput[]
  }

  export type MissedMonthUncheckedUpdateManyWithoutPenaltyNestedInput = {
    create?: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput> | MissedMonthCreateWithoutPenaltyInput[] | MissedMonthUncheckedCreateWithoutPenaltyInput[]
    connectOrCreate?: MissedMonthCreateOrConnectWithoutPenaltyInput | MissedMonthCreateOrConnectWithoutPenaltyInput[]
    upsert?: MissedMonthUpsertWithWhereUniqueWithoutPenaltyInput | MissedMonthUpsertWithWhereUniqueWithoutPenaltyInput[]
    createMany?: MissedMonthCreateManyPenaltyInputEnvelope
    set?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    disconnect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    delete?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    connect?: MissedMonthWhereUniqueInput | MissedMonthWhereUniqueInput[]
    update?: MissedMonthUpdateWithWhereUniqueWithoutPenaltyInput | MissedMonthUpdateWithWhereUniqueWithoutPenaltyInput[]
    updateMany?: MissedMonthUpdateManyWithWhereWithoutPenaltyInput | MissedMonthUpdateManyWithWhereWithoutPenaltyInput[]
    deleteMany?: MissedMonthScalarWhereInput | MissedMonthScalarWhereInput[]
  }

  export type PenaltyCreateNestedOneWithoutMissed_monthsInput = {
    create?: XOR<PenaltyCreateWithoutMissed_monthsInput, PenaltyUncheckedCreateWithoutMissed_monthsInput>
    connectOrCreate?: PenaltyCreateOrConnectWithoutMissed_monthsInput
    connect?: PenaltyWhereUniqueInput
  }

  export type PenaltyUpdateOneRequiredWithoutMissed_monthsNestedInput = {
    create?: XOR<PenaltyCreateWithoutMissed_monthsInput, PenaltyUncheckedCreateWithoutMissed_monthsInput>
    connectOrCreate?: PenaltyCreateOrConnectWithoutMissed_monthsInput
    upsert?: PenaltyUpsertWithoutMissed_monthsInput
    connect?: PenaltyWhereUniqueInput
    update?: XOR<XOR<PenaltyUpdateToOneWithWhereWithoutMissed_monthsInput, PenaltyUpdateWithoutMissed_monthsInput>, PenaltyUncheckedUpdateWithoutMissed_monthsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type NestedEnumMemberTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberType | EnumMemberTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberTypeFilter<$PrismaModel> | $Enums.MemberType
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type NestedEnumMemberTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberType | EnumMemberTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberType[] | ListEnumMemberTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberTypeWithAggregatesFilter<$PrismaModel> | $Enums.MemberType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberTypeFilter<$PrismaModel>
    _max?: NestedEnumMemberTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumRelativeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RelativeStatus | EnumRelativeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelativeStatusFilter<$PrismaModel> | $Enums.RelativeStatus
  }

  export type NestedEnumRelativeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelativeStatus | EnumRelativeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelativeStatus[] | ListEnumRelativeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRelativeStatusWithAggregatesFilter<$PrismaModel> | $Enums.RelativeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelativeStatusFilter<$PrismaModel>
    _max?: NestedEnumRelativeStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RelativeCreateWithoutMemberInput = {
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
  }

  export type RelativeUncheckedCreateWithoutMemberInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
  }

  export type RelativeCreateOrConnectWithoutMemberInput = {
    where: RelativeWhereUniqueInput
    create: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput>
  }

  export type RelativeCreateManyMemberInputEnvelope = {
    data: RelativeCreateManyMemberInput | RelativeCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutMemberInput = {
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
    contribution: ContributionCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutMemberInput = {
    id?: number
    contribution_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type PaymentCreateOrConnectWithoutMemberInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput>
  }

  export type PaymentCreateManyMemberInputEnvelope = {
    data: PaymentCreateManyMemberInput | PaymentCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type BalanceCreateWithoutMemberInput = {
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
    contribution: ContributionCreateNestedOneWithoutBalanceInput
  }

  export type BalanceUncheckedCreateWithoutMemberInput = {
    id?: number
    contribution_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type BalanceCreateOrConnectWithoutMemberInput = {
    where: BalanceWhereUniqueInput
    create: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput>
  }

  export type BalanceCreateManyMemberInputEnvelope = {
    data: BalanceCreateManyMemberInput | BalanceCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type PenaltyCreateWithoutMemberInput = {
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    contribution: ContributionCreateNestedOneWithoutPenaltyInput
    missed_months?: MissedMonthCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyUncheckedCreateWithoutMemberInput = {
    id?: number
    contribution_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    missed_months?: MissedMonthUncheckedCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyCreateOrConnectWithoutMemberInput = {
    where: PenaltyWhereUniqueInput
    create: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput>
  }

  export type PenaltyCreateManyMemberInputEnvelope = {
    data: PenaltyCreateManyMemberInput | PenaltyCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ContributionCreateWithoutMemberInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    contributionType: ContributionTypeCreateNestedOneWithoutContributionsInput
    payment?: PaymentCreateNestedManyWithoutContributionInput
    Balance?: BalanceCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateWithoutMemberInput = {
    id?: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    payment?: PaymentUncheckedCreateNestedManyWithoutContributionInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionCreateOrConnectWithoutMemberInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput>
  }

  export type ContributionCreateManyMemberInputEnvelope = {
    data: ContributionCreateManyMemberInput | ContributionCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type RelativeUpsertWithWhereUniqueWithoutMemberInput = {
    where: RelativeWhereUniqueInput
    update: XOR<RelativeUpdateWithoutMemberInput, RelativeUncheckedUpdateWithoutMemberInput>
    create: XOR<RelativeCreateWithoutMemberInput, RelativeUncheckedCreateWithoutMemberInput>
  }

  export type RelativeUpdateWithWhereUniqueWithoutMemberInput = {
    where: RelativeWhereUniqueInput
    data: XOR<RelativeUpdateWithoutMemberInput, RelativeUncheckedUpdateWithoutMemberInput>
  }

  export type RelativeUpdateManyWithWhereWithoutMemberInput = {
    where: RelativeScalarWhereInput
    data: XOR<RelativeUpdateManyMutationInput, RelativeUncheckedUpdateManyWithoutMemberInput>
  }

  export type RelativeScalarWhereInput = {
    AND?: RelativeScalarWhereInput | RelativeScalarWhereInput[]
    OR?: RelativeScalarWhereInput[]
    NOT?: RelativeScalarWhereInput | RelativeScalarWhereInput[]
    id?: IntFilter<"Relative"> | number
    member_id?: IntFilter<"Relative"> | number
    first_name?: StringFilter<"Relative"> | string
    second_name?: StringFilter<"Relative"> | string
    last_name?: StringFilter<"Relative"> | string
    relation_type?: StringFilter<"Relative"> | string
    status?: EnumRelativeStatusFilter<"Relative"> | $Enums.RelativeStatus
  }

  export type PaymentUpsertWithWhereUniqueWithoutMemberInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutMemberInput, PaymentUncheckedUpdateWithoutMemberInput>
    create: XOR<PaymentCreateWithoutMemberInput, PaymentUncheckedCreateWithoutMemberInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutMemberInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutMemberInput, PaymentUncheckedUpdateWithoutMemberInput>
  }

  export type PaymentUpdateManyWithWhereWithoutMemberInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutMemberInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    contribution_id?: IntFilter<"Payment"> | number
    member_id?: IntFilter<"Payment"> | number
    payment_date?: DateTimeFilter<"Payment"> | Date | string
    payment_month?: StringFilter<"Payment"> | string
    paid_amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringFilter<"Payment"> | string
    document?: StringFilter<"Payment"> | string
    created_at?: DateTimeFilter<"Payment"> | Date | string
  }

  export type BalanceUpsertWithWhereUniqueWithoutMemberInput = {
    where: BalanceWhereUniqueInput
    update: XOR<BalanceUpdateWithoutMemberInput, BalanceUncheckedUpdateWithoutMemberInput>
    create: XOR<BalanceCreateWithoutMemberInput, BalanceUncheckedCreateWithoutMemberInput>
  }

  export type BalanceUpdateWithWhereUniqueWithoutMemberInput = {
    where: BalanceWhereUniqueInput
    data: XOR<BalanceUpdateWithoutMemberInput, BalanceUncheckedUpdateWithoutMemberInput>
  }

  export type BalanceUpdateManyWithWhereWithoutMemberInput = {
    where: BalanceScalarWhereInput
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyWithoutMemberInput>
  }

  export type BalanceScalarWhereInput = {
    AND?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
    OR?: BalanceScalarWhereInput[]
    NOT?: BalanceScalarWhereInput | BalanceScalarWhereInput[]
    id?: IntFilter<"Balance"> | number
    member_id?: IntFilter<"Balance"> | number
    contribution_id?: IntFilter<"Balance"> | number
    amount?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"Balance"> | Date | string
  }

  export type PenaltyUpsertWithWhereUniqueWithoutMemberInput = {
    where: PenaltyWhereUniqueInput
    update: XOR<PenaltyUpdateWithoutMemberInput, PenaltyUncheckedUpdateWithoutMemberInput>
    create: XOR<PenaltyCreateWithoutMemberInput, PenaltyUncheckedCreateWithoutMemberInput>
  }

  export type PenaltyUpdateWithWhereUniqueWithoutMemberInput = {
    where: PenaltyWhereUniqueInput
    data: XOR<PenaltyUpdateWithoutMemberInput, PenaltyUncheckedUpdateWithoutMemberInput>
  }

  export type PenaltyUpdateManyWithWhereWithoutMemberInput = {
    where: PenaltyScalarWhereInput
    data: XOR<PenaltyUpdateManyMutationInput, PenaltyUncheckedUpdateManyWithoutMemberInput>
  }

  export type PenaltyScalarWhereInput = {
    AND?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
    OR?: PenaltyScalarWhereInput[]
    NOT?: PenaltyScalarWhereInput | PenaltyScalarWhereInput[]
    id?: IntFilter<"Penalty"> | number
    member_id?: IntFilter<"Penalty"> | number
    contribution_id?: IntFilter<"Penalty"> | number
    reason?: StringFilter<"Penalty"> | string
    amount?: DecimalFilter<"Penalty"> | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFilter<"Penalty"> | Date | string
    resolved_at?: DateTimeNullableFilter<"Penalty"> | Date | string | null
  }

  export type ContributionUpsertWithWhereUniqueWithoutMemberInput = {
    where: ContributionWhereUniqueInput
    update: XOR<ContributionUpdateWithoutMemberInput, ContributionUncheckedUpdateWithoutMemberInput>
    create: XOR<ContributionCreateWithoutMemberInput, ContributionUncheckedCreateWithoutMemberInput>
  }

  export type ContributionUpdateWithWhereUniqueWithoutMemberInput = {
    where: ContributionWhereUniqueInput
    data: XOR<ContributionUpdateWithoutMemberInput, ContributionUncheckedUpdateWithoutMemberInput>
  }

  export type ContributionUpdateManyWithWhereWithoutMemberInput = {
    where: ContributionScalarWhereInput
    data: XOR<ContributionUpdateManyMutationInput, ContributionUncheckedUpdateManyWithoutMemberInput>
  }

  export type ContributionScalarWhereInput = {
    AND?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
    OR?: ContributionScalarWhereInput[]
    NOT?: ContributionScalarWhereInput | ContributionScalarWhereInput[]
    id?: IntFilter<"Contribution"> | number
    member_id?: IntFilter<"Contribution"> | number
    contribution_type_id?: IntFilter<"Contribution"> | number
    random?: IntFilter<"Contribution"> | number
    type_name?: StringFilter<"Contribution"> | string
    amount?: DecimalFilter<"Contribution"> | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFilter<"Contribution"> | Date | string
    end_date?: DateTimeFilter<"Contribution"> | Date | string
  }

  export type MemberCreateWithoutRelativeInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    Payment?: PaymentCreateNestedManyWithoutMemberInput
    Balance?: BalanceCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyCreateNestedManyWithoutMemberInput
    Contribution?: ContributionCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutRelativeInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    Payment?: PaymentUncheckedCreateNestedManyWithoutMemberInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutMemberInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutRelativeInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutRelativeInput, MemberUncheckedCreateWithoutRelativeInput>
  }

  export type MemberUpsertWithoutRelativeInput = {
    update: XOR<MemberUpdateWithoutRelativeInput, MemberUncheckedUpdateWithoutRelativeInput>
    create: XOR<MemberCreateWithoutRelativeInput, MemberUncheckedCreateWithoutRelativeInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutRelativeInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutRelativeInput, MemberUncheckedUpdateWithoutRelativeInput>
  }

  export type MemberUpdateWithoutRelativeInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Payment?: PaymentUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutRelativeInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Payment?: PaymentUncheckedUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateWithoutContributionInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeCreateNestedManyWithoutMemberInput
    Payment?: PaymentCreateNestedManyWithoutMemberInput
    Balance?: BalanceCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutContributionInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeUncheckedCreateNestedManyWithoutMemberInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutMemberInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutContributionInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutContributionInput, MemberUncheckedCreateWithoutContributionInput>
  }

  export type ContributionTypeCreateWithoutContributionsInput = {
    name: string
    amount: Decimal | DecimalJsLike | number | string
    is_active?: boolean
    is_for_all?: boolean
    created_at?: Date | string
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type ContributionTypeUncheckedCreateWithoutContributionsInput = {
    id?: number
    name: string
    amount: Decimal | DecimalJsLike | number | string
    is_active?: boolean
    is_for_all?: boolean
    created_at?: Date | string
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type ContributionTypeCreateOrConnectWithoutContributionsInput = {
    where: ContributionTypeWhereUniqueInput
    create: XOR<ContributionTypeCreateWithoutContributionsInput, ContributionTypeUncheckedCreateWithoutContributionsInput>
  }

  export type PaymentCreateWithoutContributionInput = {
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
    member: MemberCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutContributionInput = {
    id?: number
    member_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type PaymentCreateOrConnectWithoutContributionInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput>
  }

  export type PaymentCreateManyContributionInputEnvelope = {
    data: PaymentCreateManyContributionInput | PaymentCreateManyContributionInput[]
    skipDuplicates?: boolean
  }

  export type BalanceCreateWithoutContributionInput = {
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
    member: MemberCreateNestedOneWithoutBalanceInput
  }

  export type BalanceUncheckedCreateWithoutContributionInput = {
    id?: number
    member_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type BalanceCreateOrConnectWithoutContributionInput = {
    where: BalanceWhereUniqueInput
    create: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput>
  }

  export type BalanceCreateManyContributionInputEnvelope = {
    data: BalanceCreateManyContributionInput | BalanceCreateManyContributionInput[]
    skipDuplicates?: boolean
  }

  export type PenaltyCreateWithoutContributionInput = {
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    member: MemberCreateNestedOneWithoutPenaltyInput
    missed_months?: MissedMonthCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyUncheckedCreateWithoutContributionInput = {
    id?: number
    member_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    missed_months?: MissedMonthUncheckedCreateNestedManyWithoutPenaltyInput
  }

  export type PenaltyCreateOrConnectWithoutContributionInput = {
    where: PenaltyWhereUniqueInput
    create: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput>
  }

  export type PenaltyCreateManyContributionInputEnvelope = {
    data: PenaltyCreateManyContributionInput | PenaltyCreateManyContributionInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithoutContributionInput = {
    update: XOR<MemberUpdateWithoutContributionInput, MemberUncheckedUpdateWithoutContributionInput>
    create: XOR<MemberCreateWithoutContributionInput, MemberUncheckedCreateWithoutContributionInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutContributionInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutContributionInput, MemberUncheckedUpdateWithoutContributionInput>
  }

  export type MemberUpdateWithoutContributionInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUncheckedUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ContributionTypeUpsertWithoutContributionsInput = {
    update: XOR<ContributionTypeUpdateWithoutContributionsInput, ContributionTypeUncheckedUpdateWithoutContributionsInput>
    create: XOR<ContributionTypeCreateWithoutContributionsInput, ContributionTypeUncheckedCreateWithoutContributionsInput>
    where?: ContributionTypeWhereInput
  }

  export type ContributionTypeUpdateToOneWithWhereWithoutContributionsInput = {
    where?: ContributionTypeWhereInput
    data: XOR<ContributionTypeUpdateWithoutContributionsInput, ContributionTypeUncheckedUpdateWithoutContributionsInput>
  }

  export type ContributionTypeUpdateWithoutContributionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContributionTypeUncheckedUpdateWithoutContributionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_for_all?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutContributionInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutContributionInput, PaymentUncheckedUpdateWithoutContributionInput>
    create: XOR<PaymentCreateWithoutContributionInput, PaymentUncheckedCreateWithoutContributionInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutContributionInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutContributionInput, PaymentUncheckedUpdateWithoutContributionInput>
  }

  export type PaymentUpdateManyWithWhereWithoutContributionInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutContributionInput>
  }

  export type BalanceUpsertWithWhereUniqueWithoutContributionInput = {
    where: BalanceWhereUniqueInput
    update: XOR<BalanceUpdateWithoutContributionInput, BalanceUncheckedUpdateWithoutContributionInput>
    create: XOR<BalanceCreateWithoutContributionInput, BalanceUncheckedCreateWithoutContributionInput>
  }

  export type BalanceUpdateWithWhereUniqueWithoutContributionInput = {
    where: BalanceWhereUniqueInput
    data: XOR<BalanceUpdateWithoutContributionInput, BalanceUncheckedUpdateWithoutContributionInput>
  }

  export type BalanceUpdateManyWithWhereWithoutContributionInput = {
    where: BalanceScalarWhereInput
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyWithoutContributionInput>
  }

  export type PenaltyUpsertWithWhereUniqueWithoutContributionInput = {
    where: PenaltyWhereUniqueInput
    update: XOR<PenaltyUpdateWithoutContributionInput, PenaltyUncheckedUpdateWithoutContributionInput>
    create: XOR<PenaltyCreateWithoutContributionInput, PenaltyUncheckedCreateWithoutContributionInput>
  }

  export type PenaltyUpdateWithWhereUniqueWithoutContributionInput = {
    where: PenaltyWhereUniqueInput
    data: XOR<PenaltyUpdateWithoutContributionInput, PenaltyUncheckedUpdateWithoutContributionInput>
  }

  export type PenaltyUpdateManyWithWhereWithoutContributionInput = {
    where: PenaltyScalarWhereInput
    data: XOR<PenaltyUpdateManyMutationInput, PenaltyUncheckedUpdateManyWithoutContributionInput>
  }

  export type ContributionCreateWithoutContributionTypeInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    member: MemberCreateNestedOneWithoutContributionInput
    payment?: PaymentCreateNestedManyWithoutContributionInput
    Balance?: BalanceCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateWithoutContributionTypeInput = {
    id?: number
    member_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    payment?: PaymentUncheckedCreateNestedManyWithoutContributionInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionCreateOrConnectWithoutContributionTypeInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput>
  }

  export type ContributionCreateManyContributionTypeInputEnvelope = {
    data: ContributionCreateManyContributionTypeInput | ContributionCreateManyContributionTypeInput[]
    skipDuplicates?: boolean
  }

  export type ContributionUpsertWithWhereUniqueWithoutContributionTypeInput = {
    where: ContributionWhereUniqueInput
    update: XOR<ContributionUpdateWithoutContributionTypeInput, ContributionUncheckedUpdateWithoutContributionTypeInput>
    create: XOR<ContributionCreateWithoutContributionTypeInput, ContributionUncheckedCreateWithoutContributionTypeInput>
  }

  export type ContributionUpdateWithWhereUniqueWithoutContributionTypeInput = {
    where: ContributionWhereUniqueInput
    data: XOR<ContributionUpdateWithoutContributionTypeInput, ContributionUncheckedUpdateWithoutContributionTypeInput>
  }

  export type ContributionUpdateManyWithWhereWithoutContributionTypeInput = {
    where: ContributionScalarWhereInput
    data: XOR<ContributionUpdateManyMutationInput, ContributionUncheckedUpdateManyWithoutContributionTypeInput>
  }

  export type ContributionCreateWithoutPaymentInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    member: MemberCreateNestedOneWithoutContributionInput
    contributionType: ContributionTypeCreateNestedOneWithoutContributionsInput
    Balance?: BalanceCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateWithoutPaymentInput = {
    id?: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    Balance?: BalanceUncheckedCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionCreateOrConnectWithoutPaymentInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionCreateWithoutPaymentInput, ContributionUncheckedCreateWithoutPaymentInput>
  }

  export type MemberCreateWithoutPaymentInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeCreateNestedManyWithoutMemberInput
    Balance?: BalanceCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyCreateNestedManyWithoutMemberInput
    Contribution?: ContributionCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutPaymentInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeUncheckedCreateNestedManyWithoutMemberInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutMemberInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutPaymentInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPaymentInput, MemberUncheckedCreateWithoutPaymentInput>
  }

  export type ContributionUpsertWithoutPaymentInput = {
    update: XOR<ContributionUpdateWithoutPaymentInput, ContributionUncheckedUpdateWithoutPaymentInput>
    create: XOR<ContributionCreateWithoutPaymentInput, ContributionUncheckedCreateWithoutPaymentInput>
    where?: ContributionWhereInput
  }

  export type ContributionUpdateToOneWithWhereWithoutPaymentInput = {
    where?: ContributionWhereInput
    data: XOR<ContributionUpdateWithoutPaymentInput, ContributionUncheckedUpdateWithoutPaymentInput>
  }

  export type ContributionUpdateWithoutPaymentInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutContributionNestedInput
    contributionType?: ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput
    Balance?: BalanceUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    Balance?: BalanceUncheckedUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type MemberUpsertWithoutPaymentInput = {
    update: XOR<MemberUpdateWithoutPaymentInput, MemberUncheckedUpdateWithoutPaymentInput>
    create: XOR<MemberCreateWithoutPaymentInput, MemberUncheckedCreateWithoutPaymentInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPaymentInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPaymentInput, MemberUncheckedUpdateWithoutPaymentInput>
  }

  export type MemberUpdateWithoutPaymentInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUncheckedUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateWithoutBalanceInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeCreateNestedManyWithoutMemberInput
    Payment?: PaymentCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyCreateNestedManyWithoutMemberInput
    Contribution?: ContributionCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutBalanceInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeUncheckedCreateNestedManyWithoutMemberInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutMemberInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutMemberInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutBalanceInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutBalanceInput, MemberUncheckedCreateWithoutBalanceInput>
  }

  export type ContributionCreateWithoutBalanceInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    member: MemberCreateNestedOneWithoutContributionInput
    contributionType: ContributionTypeCreateNestedOneWithoutContributionsInput
    payment?: PaymentCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateWithoutBalanceInput = {
    id?: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    payment?: PaymentUncheckedCreateNestedManyWithoutContributionInput
    Penalty?: PenaltyUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionCreateOrConnectWithoutBalanceInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionCreateWithoutBalanceInput, ContributionUncheckedCreateWithoutBalanceInput>
  }

  export type MemberUpsertWithoutBalanceInput = {
    update: XOR<MemberUpdateWithoutBalanceInput, MemberUncheckedUpdateWithoutBalanceInput>
    create: XOR<MemberCreateWithoutBalanceInput, MemberUncheckedCreateWithoutBalanceInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutBalanceInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutBalanceInput, MemberUncheckedUpdateWithoutBalanceInput>
  }

  export type MemberUpdateWithoutBalanceInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutBalanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUncheckedUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutMemberNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ContributionUpsertWithoutBalanceInput = {
    update: XOR<ContributionUpdateWithoutBalanceInput, ContributionUncheckedUpdateWithoutBalanceInput>
    create: XOR<ContributionCreateWithoutBalanceInput, ContributionUncheckedCreateWithoutBalanceInput>
    where?: ContributionWhereInput
  }

  export type ContributionUpdateToOneWithWhereWithoutBalanceInput = {
    where?: ContributionWhereInput
    data: XOR<ContributionUpdateWithoutBalanceInput, ContributionUncheckedUpdateWithoutBalanceInput>
  }

  export type ContributionUpdateWithoutBalanceInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutContributionNestedInput
    contributionType?: ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput
    payment?: PaymentUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateWithoutBalanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type MemberCreateWithoutPenaltyInput = {
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeCreateNestedManyWithoutMemberInput
    Payment?: PaymentCreateNestedManyWithoutMemberInput
    Balance?: BalanceCreateNestedManyWithoutMemberInput
    Contribution?: ContributionCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutPenaltyInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    profession?: string | null
    title?: string | null
    job_business?: string | null
    id_number?: string | null
    birth_date: Date | string
    citizen: string
    joined_date?: Date | string
    end_date?: Date | string | null
    wereda?: string | null
    zone_or_district?: string | null
    kebele?: string | null
    sex: $Enums.Sex
    phone_number: string
    member_type: $Enums.MemberType
    document?: string | null
    remark?: string | null
    status: $Enums.Status
    relative?: RelativeUncheckedCreateNestedManyWithoutMemberInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutMemberInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutMemberInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutPenaltyInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPenaltyInput, MemberUncheckedCreateWithoutPenaltyInput>
  }

  export type ContributionCreateWithoutPenaltyInput = {
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    member: MemberCreateNestedOneWithoutContributionInput
    contributionType: ContributionTypeCreateNestedOneWithoutContributionsInput
    payment?: PaymentCreateNestedManyWithoutContributionInput
    Balance?: BalanceCreateNestedManyWithoutContributionInput
  }

  export type ContributionUncheckedCreateWithoutPenaltyInput = {
    id?: number
    member_id: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
    payment?: PaymentUncheckedCreateNestedManyWithoutContributionInput
    Balance?: BalanceUncheckedCreateNestedManyWithoutContributionInput
  }

  export type ContributionCreateOrConnectWithoutPenaltyInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionCreateWithoutPenaltyInput, ContributionUncheckedCreateWithoutPenaltyInput>
  }

  export type MissedMonthCreateWithoutPenaltyInput = {
    month: string
  }

  export type MissedMonthUncheckedCreateWithoutPenaltyInput = {
    id?: number
    month: string
  }

  export type MissedMonthCreateOrConnectWithoutPenaltyInput = {
    where: MissedMonthWhereUniqueInput
    create: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput>
  }

  export type MissedMonthCreateManyPenaltyInputEnvelope = {
    data: MissedMonthCreateManyPenaltyInput | MissedMonthCreateManyPenaltyInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithoutPenaltyInput = {
    update: XOR<MemberUpdateWithoutPenaltyInput, MemberUncheckedUpdateWithoutPenaltyInput>
    create: XOR<MemberCreateWithoutPenaltyInput, MemberUncheckedCreateWithoutPenaltyInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPenaltyInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPenaltyInput, MemberUncheckedUpdateWithoutPenaltyInput>
  }

  export type MemberUpdateWithoutPenaltyInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutPenaltyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    job_business?: NullableStringFieldUpdateOperationsInput | string | null
    id_number?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: StringFieldUpdateOperationsInput | string
    joined_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wereda?: NullableStringFieldUpdateOperationsInput | string | null
    zone_or_district?: NullableStringFieldUpdateOperationsInput | string | null
    kebele?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    phone_number?: StringFieldUpdateOperationsInput | string
    member_type?: EnumMemberTypeFieldUpdateOperationsInput | $Enums.MemberType
    document?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    relative?: RelativeUncheckedUpdateManyWithoutMemberNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutMemberNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutMemberNestedInput
    Contribution?: ContributionUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ContributionUpsertWithoutPenaltyInput = {
    update: XOR<ContributionUpdateWithoutPenaltyInput, ContributionUncheckedUpdateWithoutPenaltyInput>
    create: XOR<ContributionCreateWithoutPenaltyInput, ContributionUncheckedCreateWithoutPenaltyInput>
    where?: ContributionWhereInput
  }

  export type ContributionUpdateToOneWithWhereWithoutPenaltyInput = {
    where?: ContributionWhereInput
    data: XOR<ContributionUpdateWithoutPenaltyInput, ContributionUncheckedUpdateWithoutPenaltyInput>
  }

  export type ContributionUpdateWithoutPenaltyInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutContributionNestedInput
    contributionType?: ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput
    payment?: PaymentUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateWithoutPenaltyInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type MissedMonthUpsertWithWhereUniqueWithoutPenaltyInput = {
    where: MissedMonthWhereUniqueInput
    update: XOR<MissedMonthUpdateWithoutPenaltyInput, MissedMonthUncheckedUpdateWithoutPenaltyInput>
    create: XOR<MissedMonthCreateWithoutPenaltyInput, MissedMonthUncheckedCreateWithoutPenaltyInput>
  }

  export type MissedMonthUpdateWithWhereUniqueWithoutPenaltyInput = {
    where: MissedMonthWhereUniqueInput
    data: XOR<MissedMonthUpdateWithoutPenaltyInput, MissedMonthUncheckedUpdateWithoutPenaltyInput>
  }

  export type MissedMonthUpdateManyWithWhereWithoutPenaltyInput = {
    where: MissedMonthScalarWhereInput
    data: XOR<MissedMonthUpdateManyMutationInput, MissedMonthUncheckedUpdateManyWithoutPenaltyInput>
  }

  export type MissedMonthScalarWhereInput = {
    AND?: MissedMonthScalarWhereInput | MissedMonthScalarWhereInput[]
    OR?: MissedMonthScalarWhereInput[]
    NOT?: MissedMonthScalarWhereInput | MissedMonthScalarWhereInput[]
    id?: IntFilter<"MissedMonth"> | number
    penalty_id?: IntFilter<"MissedMonth"> | number
    month?: StringFilter<"MissedMonth"> | string
  }

  export type PenaltyCreateWithoutMissed_monthsInput = {
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
    member: MemberCreateNestedOneWithoutPenaltyInput
    contribution: ContributionCreateNestedOneWithoutPenaltyInput
  }

  export type PenaltyUncheckedCreateWithoutMissed_monthsInput = {
    id?: number
    member_id: number
    contribution_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
  }

  export type PenaltyCreateOrConnectWithoutMissed_monthsInput = {
    where: PenaltyWhereUniqueInput
    create: XOR<PenaltyCreateWithoutMissed_monthsInput, PenaltyUncheckedCreateWithoutMissed_monthsInput>
  }

  export type PenaltyUpsertWithoutMissed_monthsInput = {
    update: XOR<PenaltyUpdateWithoutMissed_monthsInput, PenaltyUncheckedUpdateWithoutMissed_monthsInput>
    create: XOR<PenaltyCreateWithoutMissed_monthsInput, PenaltyUncheckedCreateWithoutMissed_monthsInput>
    where?: PenaltyWhereInput
  }

  export type PenaltyUpdateToOneWithWhereWithoutMissed_monthsInput = {
    where?: PenaltyWhereInput
    data: XOR<PenaltyUpdateWithoutMissed_monthsInput, PenaltyUncheckedUpdateWithoutMissed_monthsInput>
  }

  export type PenaltyUpdateWithoutMissed_monthsInput = {
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    member?: MemberUpdateOneRequiredWithoutPenaltyNestedInput
    contribution?: ContributionUpdateOneRequiredWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateWithoutMissed_monthsInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RelativeCreateManyMemberInput = {
    id?: number
    first_name: string
    second_name: string
    last_name: string
    relation_type: string
    status: $Enums.RelativeStatus
  }

  export type PaymentCreateManyMemberInput = {
    id?: number
    contribution_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type BalanceCreateManyMemberInput = {
    id?: number
    contribution_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type PenaltyCreateManyMemberInput = {
    id?: number
    contribution_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
  }

  export type ContributionCreateManyMemberInput = {
    id?: number
    contribution_type_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
  }

  export type RelativeUpdateWithoutMemberInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type RelativeUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type RelativeUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    relation_type?: StringFieldUpdateOperationsInput | string
    status?: EnumRelativeStatusFieldUpdateOperationsInput | $Enums.RelativeStatus
  }

  export type PaymentUpdateWithoutMemberInput = {
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    contribution?: ContributionUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUpdateWithoutMemberInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    contribution?: ContributionUpdateOneRequiredWithoutBalanceNestedInput
  }

  export type BalanceUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PenaltyUpdateWithoutMemberInput = {
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contribution?: ContributionUpdateOneRequiredWithoutPenaltyNestedInput
    missed_months?: MissedMonthUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    missed_months?: MissedMonthUncheckedUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContributionUpdateWithoutMemberInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributionType?: ContributionTypeUpdateOneRequiredWithoutContributionsNestedInput
    payment?: PaymentUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    contribution_type_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyContributionInput = {
    id?: number
    member_id: number
    payment_date?: Date | string
    payment_month: string
    paid_amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    document: string
    created_at?: Date | string
  }

  export type BalanceCreateManyContributionInput = {
    id?: number
    member_id: number
    amount?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type PenaltyCreateManyContributionInput = {
    id?: number
    member_id: number
    reason: string
    amount: Decimal | DecimalJsLike | number | string
    applied_at?: Date | string
    resolved_at?: Date | string | null
  }

  export type PaymentUpdateWithoutContributionInput = {
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_month?: StringFieldUpdateOperationsInput | string
    paid_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUpdateWithoutContributionInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutBalanceNestedInput
  }

  export type BalanceUncheckedUpdateWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateManyWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PenaltyUpdateWithoutContributionInput = {
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    member?: MemberUpdateOneRequiredWithoutPenaltyNestedInput
    missed_months?: MissedMonthUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    missed_months?: MissedMonthUncheckedUpdateManyWithoutPenaltyNestedInput
  }

  export type PenaltyUncheckedUpdateManyWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContributionCreateManyContributionTypeInput = {
    id?: number
    member_id: number
    random: number
    type_name: string
    amount: Decimal | DecimalJsLike | number | string
    start_date: Date | string
    end_date: Date | string
  }

  export type ContributionUpdateWithoutContributionTypeInput = {
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutContributionNestedInput
    payment?: PaymentUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateWithoutContributionTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateManyWithoutContributionNestedInput
    Balance?: BalanceUncheckedUpdateManyWithoutContributionNestedInput
    Penalty?: PenaltyUncheckedUpdateManyWithoutContributionNestedInput
  }

  export type ContributionUncheckedUpdateManyWithoutContributionTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    member_id?: IntFieldUpdateOperationsInput | number
    random?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MissedMonthCreateManyPenaltyInput = {
    id?: number
    month: string
  }

  export type MissedMonthUpdateWithoutPenaltyInput = {
    month?: StringFieldUpdateOperationsInput | string
  }

  export type MissedMonthUncheckedUpdateWithoutPenaltyInput = {
    id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
  }

  export type MissedMonthUncheckedUpdateManyWithoutPenaltyInput = {
    id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}