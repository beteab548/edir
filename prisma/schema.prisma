generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Family {
  id        Int      @id @default(autoincrement())
  // This is the human-readable, unique ID for the family (e.g., FAM-0001)
  familyId  String   @unique

  // A family can have many members (principal, spouse, children, etc.)
  members   Member[]

  // A family has one set of relatives.
  relatives Relative[]

  created_at DateTime @default(now())
}


// ===================================================================
// === 2. THE UPDATED MEMBER MODEL ===
// Now links to the 'Family' model via a foreign key.
// ===================================================================
model Member {
  id                    Int      @id @default(autoincrement())
  custom_id             String?  @unique
  first_name            String?
  second_name           String?
  last_name             String?
  profession            String?
  title                 String?
  job_business          String?
  identification_type   IDType?
  identification_number String?
  identification_image  String?
  identification_file_id String?
  birth_date            DateTime
  citizen               String?
  registered_date       DateTime @default(now())
  end_date              DateTime?
  wereda                String?
  zone_or_district      String?
  kebele                String?
  green_area            String?
  block                 String?
  house_number          String?
  founding_member       Boolean  @default(false)
  sex                   Sex?
  marital_status        MaritalStatus?
  phone_number          String?
  phone_number_2        String?
  member_type           MemberType?
  bank_name             String?
  bank_account_number   String?
  bank_account_name     String?
  email                 String?
  email_2               String?
  image_url             String?
  image_file_id         String?
  document              String?
  document_file_id      String?
  remark                String?
  created_at            DateTime  @default(now())
  status_updated_at     DateTime?
  status                Status?

  // --- Family & Spouse Relations ---
  isPrincipal           Boolean   @default(false)
  spouseId              Int?      @unique
  spouse                Member?   @relation("SpouseRelation", fields: [spouseId], references: [id])
  spousedBy             Member?   @relation("SpouseRelation")

  // --- LINK TO THE FAMILY MODEL ---
  // A member belongs to one family. This defines the "many" side of the relation.
  family                Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId              Int       // This is the foreign key to the Family table's 'id'.

  // --- Financial Relations ---
  Payment               Payment[]
  Balance               Balance[]
  Penalty               Penalty[]
  Contribution          Contribution[]
  PaymentRecord         PaymentRecord[]
}


// ===================================================================
// === 3. THE UPDATED RELATIVE MODEL ===
// Now links to the 'Family' model, not a specific member.
// ===================================================================
model Relative {
  id                Int      @id @default(autoincrement())
  first_name        String
  second_name       String?
  last_name         String
  relation_type     String
  status            RelativeStatus
  created_at        DateTime  @default(now())
  status_updated_at DateTime?

  // --- LINK TO THE FAMILY MODEL ---
  // A relative belongs to one family.
  family            Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId          Int      // This is the foreign key to the Family table's 'id'.
}
model Contribution {
  id                 Int       @id @default(autoincrement())
  member_id          Int
  contribution_type_id Int     
  type_name          String
  amount             Decimal
  start_date         DateTime
  end_date           DateTime?
  member             Member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contributionType   ContributionType @relation(fields: [contribution_type_id], references: [id], onDelete: Cascade)
  @@unique([member_id, contribution_type_id])
  payment            Payment[]
  Balance            Balance[]
  Penalty            Penalty[]
  ContributionSchedule ContributionSchedule[]
}

model ContributionType {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  amount         Decimal
  penalty_amount Decimal?      @default(0) 
  is_active      Boolean       @default(true)
  is_for_all     Boolean       @default(false)
  created_at     DateTime      @default(now())
  start_date     DateTime
  end_date       DateTime?
  months_before_inactivation Int?
  mode           ContributionMode @default(OneTimeWindow) 
  period_months  Int?            
  contributions  Contribution[]
  PaymentRecord PaymentRecord[]
}

model PaymentRecord {
  id                   Int       @id @default(autoincrement())
 custom_id           String
  member_id            Int
  contribution_Type_id Int?
  Penalty_id Int?
  payment_date       DateTime  @default(now())
  payment_method     String
  document_reference String   @default("-") 
  total_paid_amount  Decimal  
  remaining_balance  Decimal?
  penalty_type_payed_for PenaltyType? @default(automatically) 
  member                 Member      @relation(fields: [member_id], references: [id],onDelete: Cascade)
  contributionType       ContributionType? @relation(fields: [contribution_Type_id], references: [id],onDelete: Cascade)
  payments               Payment[]    
  created_at         DateTime    @default(now())
}

model Payment {
  id                      Int       @id @default(autoincrement())
  payment_record_id       Int
  member_id               Int
  contribution_id         Int
  contribution_schedule_id Int?    
  penalty_id              Int?
  payment_type            String   
  payment_month           String    
  paid_amount             Decimal
  penalty                 Penalty?      @relation(fields: [penalty_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paymentRecord           PaymentRecord @relation(fields: [payment_record_id], references: [id],onDelete: Cascade)
  member                  Member        @relation(fields: [member_id], references: [id],onDelete: Cascade)
  contribution            Contribution  @relation(fields: [contribution_id], references: [id], onDelete: Cascade)
  contributionSchedule    ContributionSchedule? @relation(fields: [contribution_schedule_id], references: [id], onDelete: Cascade)
}

model Balance {
  id                Int          @id @default(autoincrement())
  member_id         Int
  contribution_id   Int
  amount            Decimal      @default(0)
  unallocated_amount Decimal @default(0)
  updated_at        DateTime     @updatedAt
  member            Member       @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contribution      Contribution @relation(fields: [contribution_id], references: [id], onDelete: Cascade)
  @@unique([member_id, contribution_id]) 
}

model Penalty {
  id                        Int                   @id @default(autoincrement())
  member_id                 Int
  contribution_id           Int?
  contribution_schedule_id  Int?
  member                   Member                @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contribution             Contribution?          @relation(fields: [contribution_id], references: [id], onDelete: Cascade)
  contributionSchedule     ContributionSchedule?  @relation(fields: [contribution_schedule_id], references: [id], onDelete: Cascade)
  waived  Boolean? @default(false)
  waived_reason String?
  waived_reason_document String?
  waived_reason_document_file_id String?
  generated PenaltyType? @default(automatically) 
  penalty_type             String?
  reason                   String
  expected_amount           Decimal  
  paid_amount              Decimal               @default(0) 
  missed_month             DateTime
  is_paid                  Boolean               @default(false)
  applied_at               DateTime              @default(now())
  resolved_at              DateTime?
  penaltyTypeId Int?
  @@unique([member_id, contribution_id, missed_month])
   Payment Payment[] 
  penaltyType   PenaltyTypeModel?   @relation(fields: [penaltyTypeId], references: [id], onDelete: Cascade)
}

model PenaltyTypeModel {

  id        Int      @id @default(autoincrement())
  name      String   @unique
  penalties Penalty[]

}



model ContributionSchedule {
  id              Int       @id @default(autoincrement())
  contribution_id Int
  member_id       Int
  month           DateTime  
  expected_amount Decimal 
  paid_amount     Decimal   @default(0.0)
  is_paid         Boolean    @default(false)
  paid_at         DateTime?
  penalties       Penalty[]  
  contribution    Contribution  @relation(fields: [contribution_id], references: [id],onDelete: Cascade)
  Payment Payment[]
}

enum Sex {
  Male   
  Female 
}

enum Status {
  Active
  Inactive
  Left
  Deceased
}
 enum RelativeStatus {
  Alive 
  Sick 
  Deceased
 }
 enum RelationType {
  Mother
  Father
  Daughter
  Son
  Sister
  Brother
  Spouse_Mother
  Spouse_Father
  Spouse_Sister
  Spouse_Brother
  other
 }
enum MemberType {
  New 
  Existing
  
 }
enum ContributionMode {
  Recurring 
  OneTimeWindow        
  OpenEndedRecurring
}

enum PenaltyType {
  automatically
  manually
}
enum MaritalStatus {
  single
  married
  divorced
  widowed
}
enum IDType {
  FAYDA
  KEBELE_ID
  PASSPORT
}
