// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id           Int     @id @default(autoincrement())
  first_name   String
  second_name  String
  last_name    String
  profession   String?
  title        String?
  job_business String?
  id_number    String?  @unique
  birth_date   DateTime
  citizen      String
  joined_date   DateTime @default(now())
  end_date     DateTime?
  wereda        String?        
  zone_or_district String?     
  kebele        String? 
  sex          Sex
  phone_number String  @unique
  member_type MemberType 
  phone_number_2 String @unique @default("null")
  bank_name    String?
  bank_account_number String? @unique
  bank_account_name String?
  email        String? @unique
  email_2      String? @unique
  image_url String?
  image_file_id String?
  document     String?
  document_file_id     String?
  remark String?
  status Status 
  relative  Relative[]
  Payment Payment[]
  Balance Balance[]
  Penalty Penalty[]
  Contribution Contribution[]

  PaymentRecord PaymentRecord[]
}

model Relative{
  id Int @id @default(autoincrement())
  member_id Int 
  first_name String
  second_name String
  last_name String
  relation_type String
  status RelativeStatus
  member Member @relation(fields: [member_id],references: [id],onDelete: Cascade)
}

model Contribution {
  id                 Int       @id @default(autoincrement())
  member_id          Int
  contribution_type_id Int     
  type_name          String
  amount             Decimal
  start_date         DateTime
  end_date           DateTime?
  member             Member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contributionType   ContributionType @relation(fields: [contribution_type_id], references: [id], onDelete: Cascade)
  @@unique([member_id, contribution_type_id])
  payment            Payment[]
  Balance            Balance[]
  Penalty            Penalty[]
  ContributionSchedule ContributionSchedule[]
  PaymentRecord PaymentRecord[]
}

model ContributionType {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  amount         Decimal
  penalty_amount Decimal?      @default(0) 
  is_active      Boolean       @default(true)
  is_for_all     Boolean       @default(false)
  created_at     DateTime      @default(now())
  start_date     DateTime?
  end_date       DateTime?
  months_before_inactivation Int?
  mode           ContributionMode @default(OneTimeWindow) 
  period_months  Int?            
  contributions  Contribution[]
}

model PaymentRecord {
  id                Int       @id @default(autoincrement())
  member_id         Int
  contribution_id   Int
  payment_date      DateTime  @default(now())
  payment_method    String
  document_reference String   @default("-")
  
  total_paid_amount Decimal   // total amount paid in this record
  remaining_balance Decimal?   // âœ… remaining balance after this payment

  member            Member      @relation(fields: [member_id], references: [id])
  contribution      Contribution @relation(fields: [contribution_id], references: [id])
  payments          Payment[]    // linked breakdowns

  created_at        DateTime    @default(now())
}



model Payment {
  id                      Int       @id @default(autoincrement())
  payment_record_id       Int
  member_id               Int
  contribution_id         Int
  contribution_schedule_id Int?     // Can be null for future use or general cases
  payment_type            String    // "penalty", "OneTimeWindow", etc.
  payment_month           String    // Format: "YYYY-MM"
  paid_amount             Decimal
  paymentRecord           PaymentRecord @relation(fields: [payment_record_id], references: [id])
  member                  Member        @relation(fields: [member_id], references: [id])
  contribution            Contribution  @relation(fields: [contribution_id], references: [id])
  contributionSchedule    ContributionSchedule? @relation(fields: [contribution_schedule_id], references: [id])
}



model Balance {
  id                Int          @id @default(autoincrement())
  member_id         Int
  contribution_id   Int
  amount            Decimal      @default(0)
  updated_at        DateTime     @updatedAt

  member            Member       @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contribution      Contribution @relation(fields: [contribution_id], references: [id], onDelete: Cascade)

  @@unique([member_id, contribution_id]) 
}

model Penalty {
  id                        Int                   @id @default(autoincrement())
  member_id                 Int
  contribution_id           Int
  contribution_schedule_id  Int

  member                   Member                @relation(fields: [member_id], references: [id], onDelete: Cascade)
  contribution             Contribution          @relation(fields: [contribution_id], references: [id], onDelete: Cascade)
  contributionSchedule     ContributionSchedule  @relation(fields: [contribution_schedule_id], references: [id], onDelete: Cascade)

  reason                   String
  amount                   Decimal
  paid_amount              Decimal               @default(0) // <-- Add this
  missed_month             DateTime
  is_paid                  Boolean               @default(false)
  applied_at               DateTime              @default(now())
  resolved_at              DateTime?
}


model ContributionSchedule {
  id              Int       @id @default(autoincrement())
  contribution_id Int
  member_id       Int
  month           DateTime  
  paid_amount     Decimal   @default(0.0)
  is_paid         Boolean    @default(false)
  paid_at         DateTime?
  penalties       Penalty[]  
  contribution    Contribution  @relation(fields: [contribution_id], references: [id],onDelete: Cascade)

  Payment Payment[]
}

enum Sex {
  Male   
  Female 
}

enum Status {
  Active
  Inactive
}
 enum RelativeStatus {
  Alive 
  Sick 
  Deceased
 }
 enum RelationType {
  Mother
  Father
  Daughter
  Son
  Sister
  Brother
  Spouse_Mother
  Spouse_Father
  Spouse_Sister
  Spouse_Brother
  other
 }
enum MemberType {
  New 
  Existing
 }
enum ContributionMode {
  Recurring 
  OneTimeWindow        
  OpenEndedRecurring
}
